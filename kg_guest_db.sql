USE MASTER
GO
IF 'KG_GUEST' NOT IN (SELECT NAME FROM MASTER.SYS.DATABASES)
BEGIN
	CREATE DATABASE KG_GUEST
END
GO
USE KG_GUEST
GO
GO
USE MASTER
GO
IF NOT EXISTS (SELECT NAME FROM KG_GUEST.SYS.SQL_LOGINS WHERE NAME = 'TSK_KG')
BEGIN
	CREATE LOGIN [TSK_KG] WITH PASSWORD=N'MasterKirey2024', 
		DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=ON, CHECK_POLICY=ON
END
GO
USE KG_GUEST
GO
SET NOCOUNT ON
GO
IF NOT EXISTS (SELECT NAME FROM KG_GUEST.SYS.SYSUSERS WHERE NAME = 'TSK_KG')
BEGIN	
	CREATE USER       [TSK_KG]         FOR LOGIN  [TSK_KG]
	ALTER LOGIN       [TSK_KG]         DISABLE
	ALTER SERVER ROLE [sysadmin]       ADD MEMBER [TSK_KG]
	ALTER SERVER ROLE [dbcreator]      ADD MEMBER [TSK_KG]
	ALTER SERVER ROLE [bulkadmin]      ADD MEMBER [TSK_KG]
	ALTER ROLE        [db_accessadmin] ADD MEMBER [TSK_KG]
	ALTER ROLE        [db_datareader]  ADD MEMBER [TSK_KG]
	ALTER ROLE        [db_datawriter]  ADD MEMBER [TSK_KG]
	ALTER ROLE        [db_ddladmin]    ADD MEMBER [TSK_KG]
	ALTER ROLE        [db_owner]       ADD MEMBER [TSK_KG]
	ALTER LOGIN       [TSK_KG]         ENABLE
END 
GO 
IF OBJECT_ID('KG_GUEST.DBO.REGISTER','U') IS NOT NULL
BEGIN
	DELETE FROM KG_GUEST.DBO.REGISTER
	DROP TABLE  KG_GUEST.DBO.REGISTER
END
GO
IF OBJECT_ID('KG_GUEST.DBO.ANAG_SET_ROLES','U') IS NOT NULL
BEGIN
	DELETE FROM KG_GUEST.DBO.ANAG_SET_ROLES
	DROP TABLE  KG_GUEST.DBO.ANAG_SET_ROLES
END
GO
IF OBJECT_ID('KG_GUEST.DBO.ANAG_GUEST') IS NOT NULL
BEGIN
	DELETE FROM KG_GUEST.DBO.ANAG_GUEST
	DROP TABLE KG_GUEST.DBO.ANAG_GUEST
END
GO
IF OBJECT_ID('KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY') IS NOT NULL
BEGIN
	DELETE FROM KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
	DROP TABLE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
END
GO 
IF OBJECT_ID('KG_GUEST.DBO.LogErrori') IS NOT NULL
BEGIN
	DELETE FROM KG_GUEST.DBO.LogErrori
	DROP TABLE KG_GUEST.DBO.LogErrori
END
GO 
IF OBJECT_ID('KG_GUEST.DBO.LogEventi') IS NOT NULL
BEGIN
	DELETE FROM KG_GUEST.DBO.LogEventi
	DROP TABLE KG_GUEST.DBO.LogEventi
END
GO 
IF OBJECT_ID('KG_GUEST.DBO.SQ_GUEST','SO') IS NOT NULL
BEGIN
	DROP SEQUENCE DBO.SQ_GUEST
END
GO
IF OBJECT_ID('KG_GUEST.DBO.SQ_REGISTER','SO') IS NOT NULL
BEGIN
	DROP SEQUENCE DBO.SQ_REGISTER
END
GO
IF 'ANAG_EMPLOYEE_COMPANY' NOT IN (SELECT NAME FROM KG_GUEST.SYS.TABLES WHERE SCHEMA_NAME(SCHEMA_ID)='DBO')
BEGIN
	CREATE TABLE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
	(
	 EMPLOYEE_COMPANY_ID         INTEGER IDENTITY(1,1) NOT NULL,
	 EMPLOYEE_COMPANY_NAME       VARCHAR(200)          NOT NULL,
	 EMPLOYEE_COMPANY_LOCATION   VARCHAR(200)          NOT NULL,
	 EMPLOYEE_COMPANY_ADDRESS    VARCHAR(200)          NOT NULL,
	 EMPLOYEE_COMPANY_COUNTRY    VARCHAR(200)          NOT NULL,
	 EMPLOYEE_COMPANY_HOLIDAYS   VARCHAR(200)              NULL,
	 NOTA                        VARCHAR(1000)             NULL,
	 USERNAME                    VARCHAR(100)          NOT NULL,
	 DATETIME                    DATETIME2             NOT NULL
	) 
	ON [PRIMARY]
	ALTER TABLE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
		ADD CONSTRAINT DF_EMPLOYEE_COMPANY_NAME_USERNAME DEFAULT (SUSER_NAME()) FOR USERNAME
	ALTER TABLE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
		ADD CONSTRAINT DF_EMPLOYEE_COMPANY_NAME_DATETIME DEFAULT (GETDATE()) FOR DATETIME
    ALTER TABLE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
		ADD CONSTRAINT PK_EMPLOYEE_COMPANY_ID PRIMARY KEY CLUSTERED (EMPLOYEE_COMPANY_ID ASC) ON [PRIMARY]
	ALTER TABLE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
		ADD CONSTRAINT UQ_EMPLOYEE_COMPANY_NAME UNIQUE 
		    (EMPLOYEE_COMPANY_NAME ASC, EMPLOYEE_COMPANY_LOCATION ASC, EMPLOYEE_COMPANY_ADDRESS ASC, EMPLOYEE_COMPANY_COUNTRY ASC)
END
GO
IF 'ANAG_SET_ROLES' NOT IN (SELECT NAME FROM KG_GUEST.SYS.TABLES WHERE SCHEMA_NAME(SCHEMA_ID)='DBO')
BEGIN
	CREATE TABLE KG_GUEST.DBO.ANAG_SET_ROLES
	(
	 ROLES_ID    INTEGER IDENTITY(1,1) NOT NULL,
	 ROLES_CODE  VARCHAR(20)           NOT NULL,
	 ROLES_DESCR VARCHAR(100)              NULL,
	 NOTA        VARCHAR(1000)             NULL,
	 USERNAME    VARCHAR(100)          NOT NULL,
	 DATETIME    DATETIME2             NOT NULL
	)
	ON [PRIMARY]
	ALTER TABLE KG_GUEST.DBO.ANAG_SET_ROLES
		ADD CONSTRAINT PK_ROLES_ID PRIMARY KEY CLUSTERED (ROLES_ID ASC) ON [PRIMARY]
	ALTER TABLE KG_GUEST.DBO.ANAG_SET_ROLES
		ADD CONSTRAINT UQ_ROLES_CODE UNIQUE (ROLES_CODE ASC)
	ALTER TABLE KG_GUEST.DBO.ANAG_SET_ROLES
		ADD CONSTRAINT DF_ROLES_USERNAME DEFAULT (SUSER_NAME()) FOR USERNAME
	ALTER TABLE KG_GUEST.DBO.ANAG_SET_ROLES
		ADD CONSTRAINT DF_ROLES_DATETIME DEFAULT (GETDATE()) FOR DATETIME
END
GO
IF 'SQ_GUEST' NOT IN (SELECT NAME FROM KG_GUEST.SYS.SEQUENCES)
BEGIN
	CREATE SEQUENCE DBO.SQ_GUEST 
	AS BIGINT
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807
	CACHE 
END
GO
IF 'ANAG_GUEST' NOT IN (SELECT NAME FROM KG_GUEST.SYS.TABLES WHERE SCHEMA_NAME(SCHEMA_ID)='DBO')
BEGIN
	CREATE TABLE KG_GUEST.DBO.ANAG_GUEST
	(
	 GUEST_ID                  BIGINT        NOT NULL,
	 GUEST_FIRST_NAME          VARCHAR(200)  NOT NULL,
	 GUEST_LAST_NAME           VARCHAR(200)  NOT NULL,
	 GUEST_CODE                VARCHAR(100)      NULL,
	 GUEST_COMPANY_NAME        VARCHAR(100)  NOT NULL,
	 GUEST_FISCAL_CODE         VARCHAR(100)  NOT NULL,
	 GUEST_PHONE_NUMBER        VARCHAR(100)      NULL,
	 GUEST_EMAIL               VARCHAR(100)      NULL,
	 NOTA                      VARCHAR(1000)     NULL,
	 USERNAME                  VARCHAR(100)  NOT NULL,
	 DATETIME                  DATETIME2     NOT NULL
	)
	ON [PRIMARY]
    ALTER TABLE KG_GUEST.DBO.ANAG_GUEST
		ADD CONSTRAINT DF_GUEST_ID DEFAULT (NEXT VALUE FOR DBO.SQ_GUEST) FOR GUEST_ID
    ALTER TABLE KG_GUEST.DBO.ANAG_GUEST
		ADD CONSTRAINT DF_GUEST_USERNAME DEFAULT (SUSER_NAME()) FOR USERNAME
	ALTER TABLE KG_GUEST.DBO.ANAG_GUEST
		ADD CONSTRAINT DF_GUEST_DATETIME DEFAULT (GETDATE()) FOR DATETIME
	ALTER TABLE KG_GUEST.DBO.ANAG_GUEST
		ADD CONSTRAINT UQ_GUEST_FISCAL_CODE UNIQUE (GUEST_FISCAL_CODE ASC)
	ALTER TABLE KG_GUEST.DBO.ANAG_GUEST
		ADD CONSTRAINT PK_GUEST_ID PRIMARY KEY CLUSTERED (GUEST_ID ASC) ON [PRIMARY]
END
IF 'SQ_REGISTER' NOT IN (SELECT NAME FROM KG_GUEST.SYS.SEQUENCES)
BEGIN
	CREATE SEQUENCE DBO.SQ_REGISTER 
	AS BIGINT
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807
	CACHE 
END
GO
IF 'REGISTER' NOT IN (SELECT NAME FROM KG_GUEST.SYS.TABLES WHERE SCHEMA_NAME(SCHEMA_ID)='DBO')
BEGIN
	CREATE TABLE KG_GUEST.DBO.REGISTER
	(
	 REGISTER_ID           BIGINT        NOT NULL,
	 EMPLOYEE_COMPANY_ID   INTEGER       NOT NULL,
	 GUEST_ID              BIGINT        NOT NULL,
	 DATETIME_WORK_START   DATETIME2         NULL,
	 DATETIME_WORK_END     DATETIME2         NULL,
	 NOTA                  VARCHAR(1000)     NULL,
	 USERNAME              VARCHAR(100)  NOT NULL,
	 DATETIME              DATETIME2     NOT NULL
	)
	ON [PRIMARY]
    ALTER TABLE KG_GUEST.DBO.REGISTER
		ADD CONSTRAINT DF_REGISTER_ID DEFAULT (NEXT VALUE FOR DBO.SQ_REGISTER) FOR REGISTER_ID
	ALTER TABLE KG_GUEST.DBO.REGISTER
		ADD CONSTRAINT PK_REGISTER_ID PRIMARY KEY CLUSTERED (REGISTER_ID ASC) ON [PRIMARY]
	ALTER TABLE KG_GUEST.DBO.REGISTER
		ADD CONSTRAINT DF_REGISTER_USERNAME DEFAULT (SUSER_NAME()) FOR USERNAME
	ALTER TABLE KG_GUEST.DBO.REGISTER
		ADD CONSTRAINT DF_REGISTER_DATETIME DEFAULT (GETDATE()) FOR DATETIME
	ALTER TABLE KG_GUEST.DBO.REGISTER
		ADD CONSTRAINT FK_REGISTER_GUEST_ID FOREIGN KEY (GUEST_ID) REFERENCES KG_GUEST.DBO.ANAG_GUEST (GUEST_ID) 
	ALTER TABLE KG_GUEST.DBO.REGISTER
		ADD CONSTRAINT FK_EMPLOYEE_COMPANY_ID FOREIGN KEY (EMPLOYEE_COMPANY_ID) REFERENCES KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY (EMPLOYEE_COMPANY_ID)
END
GO
IF 'LogEventi' NOT IN (SELECT NAME FROM KG_GUEST.SYS.TABLES WHERE SCHEMA_NAME(SCHEMA_ID)='DBO')
BEGIN
	CREATE TABLE KG_GUEST.DBO.LogEventi
	(
	 ID_EVENTO      INTEGER IDENTITY(1,1) NOT NULL,
	 DESCRIZIONE    VARCHAR(1000)             NULL,
	 MAIN_PROCEDURE VARCHAR(1000)             NULL,
	 PARAMETRI      VARCHAR(1000)             NULL,
	 NOTA           VARCHAR(4000)             NULL,
	 C_RUOLO        VARCHAR(100)              NULL,
	 SESSIONID      VARCHAR(100)              NULL,
	 USERID         VARCHAR(100)              NULL,
	 TIMESTAMP      SMALLDATETIME             NULL,
	 CONSTRAINT [XPKLogEventi] PRIMARY KEY CLUSTERED 
	(
		ID_EVENTO ASC
	) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON /*OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF*/) ON [PRIMARY]
	) ON [PRIMARY]
END
GO
GO
IF 'LogErrori' NOT IN (SELECT NAME FROM KG_GUEST.SYS.TABLES WHERE SCHEMA_NAME(SCHEMA_ID)='DBO')
BEGIN
	CREATE TABLE KG_GUEST.DBO.LogErrori
	(
	 ID_ERRORE      INTEGER IDENTITY(1,1) NOT NULL,
	 DESCRIZIONE    VARCHAR(4000)             NULL,
	 MAIN_PROCEDURE VARCHAR(100)              NULL,
	 USERID         VARCHAR(100)              NULL,
	 TIMESTAMP      SMALLDATETIME             NULL,
	 CONSTRAINT [XPKLogErrori] PRIMARY KEY CLUSTERED 
	(
		ID_ERRORE ASC
	) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON /*OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF*/) ON [PRIMARY]
	) ON [PRIMARY]
END
GO
USE KG_GUEST
GO
CREATE OR ALTER FUNCTION [dbo].[FN_LogEventi]
(
 @ID_ELAB        AS VARCHAR(1000), 
 @MAIN_PROCEDURE AS VARCHAR(1000), 
 @ESITO          AS VARCHAR(1000), 
 @DATE           AS VARCHAR(1000)
)
RETURNS @T TABLE
(
 ID_EVENTO      INTEGER         NULL,
 DESCRIZIONE    VARCHAR(1000)   NULL,
 MAIN_PROCEDURE VARCHAR(1000)   NULL,
 PARAMETRI      VARCHAR(1000)   NULL,
 NOTA           VARCHAR(4000)   NULL,
 C_RUOLO        VARCHAR(100)    NULL,
 SESSIONID      VARCHAR(100)    NULL,
 USERID         VARCHAR(100)    NULL,
 TIMESTAMP      SMALLDATETIME   NULL
)
AS
BEGIN
	SELECT @ID_ELAB =        IIF(@ID_ELAB='' OR @ID_ELAB=' ' OR TRIM(@ID_ELAB)='',NULL,@ID_ELAB),
	       @MAIN_PROCEDURE = IIF(@MAIN_PROCEDURE='' OR @MAIN_PROCEDURE=' ' OR TRIM(@MAIN_PROCEDURE)='',NULL,@MAIN_PROCEDURE),
		   @ESITO =          IIF(@ESITO='' OR @ESITO=' ' OR TRIM(@ESITO)='',NULL,@ESITO),
		   @DATE =           IIF(@DATE='' OR @DATE=' ' OR TRIM(@DATE)='',NULL,@DATE)
	INSERT INTO @T 
	           (ID_EVENTO, DESCRIZIONE, MAIN_PROCEDURE, PARAMETRI, NOTA, C_RUOLO, SESSIONID, USERID, TIMESTAMP)
	SELECT CAST(ID_EVENTO AS INTEGER)       AS ID_EVENTO,
	       DESCRIZIONE                      AS DESCRIZIONE, 
		   MAIN_PROCEDURE                   AS MAIN_PROCEDURE,
		   PARAMETRI                        AS PARAMETRI, 
		   NOTA                             AS NOTA, 
		   C_RUOLO                          AS RUOLO, 
		   SESSIONID                        AS SESSIONID, 
		   USERID                           AS USERID,
		   CAST(TIMESTAMP AS SMALLDATETIME) AS TIMESTAMP
	FROM dbo.LogEventi
	WHERE (@ID_ELAB IS NULL 
	       OR
		   ID_EVENTO IN (
		                 SELECT LE.ID_EVENTO
						 FROM dbo.LogEventi AS LE
						 CROSS APPLY (
						              SELECT DISTINCT '%ID_ELAB: !['+CAST(VALUE AS VARCHAR(50))+']%' AS VALUE 
						              FROM STRING_SPLIT(@ID_ELAB,',')
						 			 ) AS LK
						 WHERE LE.DESCRIZIONE LIKE LK.VALUE ESCAPE '!'
						)
		  ) 
		  AND
		  (@MAIN_PROCEDURE IS NULL 
	       OR
		   ID_EVENTO IN (
		                 SELECT LE.ID_EVENTO
						 FROM dbo.LogEventi AS LE
						 CROSS APPLY (
						              SELECT DISTINCT '%SP: !['+CAST(VALUE AS VARCHAR(50))+']%' AS VALUE 
						              FROM STRING_SPLIT(@MAIN_PROCEDURE,',')
						 			 ) AS LK
						 WHERE LE.MAIN_PROCEDURE LIKE LK.VALUE ESCAPE '!'
						)
		  )
		  AND
		  (@ESITO IS NULL 
	       OR
		   ID_EVENTO IN (
		                 SELECT LE.ID_EVENTO
						 FROM dbo.LogEventi AS LE
						 CROSS APPLY (
						              SELECT DISTINCT '%ESITO: !['+CAST(VALUE AS VARCHAR(50))+']%' AS VALUE 
						              FROM STRING_SPLIT(@ESITO,',')
						 			 ) AS LK
						 WHERE LE.DESCRIZIONE LIKE LK.VALUE ESCAPE '!'
						)
		  ) 
		  AND
		  (@DATE IS NULL 
	       OR
		   ID_EVENTO IN (
		                 SELECT LE.ID_EVENTO
						 FROM dbo.LogEventi AS LE
						 CROSS APPLY (
						              SELECT DISTINCT FORMAT(CAST(VALUE AS SMALLDATETIME),'yyy-MM-dd') AS VALUE
									  FROM STRING_SPLIT(@DATE,',')
						 			 ) AS LK
						 WHERE FORMAT(LE.TIMESTAMP,'yyyy-MM-dd') LIKE '%'+LK.VALUE+'%' 
						)
		  ) 
	RETURN
END
GO
CREATE OR ALTER FUNCTION [dbo].[FN_LogView]
(
 @ID_ELAB        AS VARCHAR(1000), 
 @MAIN_PROCEDURE AS VARCHAR(1000), 
 @ESITO          AS VARCHAR(1000), 
 @DATE           AS VARCHAR(1000)
)
RETURNS TABLE 
AS
RETURN
 WITH DM AS (
	SELECT EV.ID_EVENTO         AS ID_EVENTO, 
	       EV.TIMESTAMP         AS TIMESTAMP,
		   EV.MAIN_PROCEDURE    AS MAIN_PROCEDURE,
		   EV.PARAMETRI         AS PARAMETRI,
		   EV.DESCRIZIONE       AS DESCRIZIONE_EVENTO,
		   ER.ID_ERRORE         AS ID_ERRORE,
		   ER.DESCRIZIONE       AS DESCRIZIONE_ERRORE,
		   EV.NOTA              AS NOTA,
		   EV.C_RUOLO           AS C_RUOLO,
		   EV.SESSIONID         AS SESSIONID,
		   EV.USERID            AS USERID 
	FROM dbo.FN_LogEventi(@ID_ELAB,@MAIN_PROCEDURE,@ESITO,@DATE) AS EV
	LEFT OUTER JOIN (
					 SELECT ID_ERRORE, 
					        DESCRIZIONE,
							ID_EVENTO 
					 FROM dbo.LogErrori AS LE
					 CROSS APPLY (SELECT DISTINCT '%ID_EVENTO_RIGA_ERRORE: !['+CAST(ID_EVENTO AS VARCHAR(50))+']%' AS VALUE, 
					                               ID_EVENTO													   AS ID_EVENTO
					              FROM dbo.FN_LogEventi(@ID_ELAB,@MAIN_PROCEDURE,@ESITO,@DATE)
					 			 ) AS LK
					 WHERE LE.DESCRIZIONE LIKE LK.VALUE ESCAPE '!'
			        ) AS ER ON ER.ID_EVENTO = EV.ID_EVENTO
	)
	SELECT    ID_EVENTO, 
	          TIMESTAMP,
			  MAIN_PROCEDURE,
			  PARAMETRI,
			  ID_ELAB =
					  CASE WHEN DESCRIZIONE_EVENTO NOT LIKE '%ID_ELAB%' THEN NULL
					  ELSE
					  CAST(SUBSTRING(TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),
					  CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),1)+1,
					  CHARINDEX(']',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),1)-
					  CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),1)-1) 
					  AS INTEGER) 
					  END,
			  ID_ELAB_PROG = 
						   ROW_NUMBER() 
							    OVER (
			                    PARTITION BY 
									TIMESTAMP,
									CASE WHEN DESCRIZIONE_EVENTO NOT LIKE '%ID_ELAB%' THEN NULL
									ELSE
									CAST(SUBSTRING(TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),
									CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),1)+1,
									CHARINDEX(']',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),1)-
									CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ID_ELAB:',DESCRIZIONE_EVENTO,1)-LEN('ID_ELAB:')+1)),1)-1) 
									AS INTEGER) END
								ORDER BY 
								    TIMESTAMP ASC,
									ID_EVENTO ASC
									  ), 
			  EVENTO_LOG =
						 CASE WHEN DESCRIZIONE_EVENTO NOT LIKE '%EVENTO%' THEN NULL
						 ELSE
						 LEFT(TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('EVENTO_LOG_',DESCRIZIONE_EVENTO,1)-LEN('EVENTO_LOG_')+1)),
						 CHARINDEX(':',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('EVENTO_LOG_',DESCRIZIONE_EVENTO,1)-LEN('EVENTO_LOG_')+1)),1)-1)
						 END,
			  NR_LOG =
					 CASE WHEN DESCRIZIONE_EVENTO NOT LIKE '%NR_LOG%' THEN NULL
					 ELSE
					 CAST(SUBSTRING(TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('NR_LOG:',DESCRIZIONE_EVENTO,1)-LEN('NR_LOG:')+1)),
					 CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('NR_LOG:',DESCRIZIONE_EVENTO,1)-LEN('NR_LOG:')+1)),1)+1,
					 CHARINDEX(']',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('NR_LOG:',DESCRIZIONE_EVENTO,1)-LEN('NR_LOG:')+1)),1)-
					 CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('NR_LOG:',DESCRIZIONE_EVENTO,1)-LEN('NR_LOG:')+1)),1)-1) 
					 AS INTEGER) 
					 END,
			  ESITO =
					CASE WHEN DESCRIZIONE_EVENTO NOT LIKE '%ESITO%' THEN NULL
					ELSE
					CAST(SUBSTRING(TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ESITO:',DESCRIZIONE_EVENTO,1)-LEN('ESITO:')+1)),
					CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ESITO:',DESCRIZIONE_EVENTO,1)-LEN('ESITO:')+1)),1)+1,
					CHARINDEX(']',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ESITO:',DESCRIZIONE_EVENTO,1)-LEN('ESITO:')+1)),1)-
					CHARINDEX('[',TRIM(RIGHT(DESCRIZIONE_EVENTO,LEN(DESCRIZIONE_EVENTO)-CHARINDEX('ESITO:',DESCRIZIONE_EVENTO,1)-LEN('ESITO:')+1)),1)-1) 
					AS INTEGER) 
					END,
			  DESCRIZIONE_EVENTO,
			  ID_ERRORE,
			  DESCRIZIONE_ERRORE,
			  NOTA,
			  C_RUOLO,
			  SESSIONID,
			  USERID
	FROM DM
GO
CREATE OR ALTER PROCEDURE [dbo].[SP_LogEventiElabID]
(
 @ESITO   AS INTEGER     OUTPUT,
 @ID_ELAB AS VARCHAR(50) OUTPUT
)
AS
BEGIN

	BEGIN TRY
			
			IF @ESITO = 1
			BEGIN 
				; 
				WITH 
				ID_EVENTO AS 
				(
				 SELECT MAX(ID_EVENTO) AS ID_EVENTO 
				 FROM dbo.LogEventi 
				 WHERE DESCRIZIONE NOT LIKE '%ID_ELAB: ![-]%' ESCAPE '!' AND DESCRIZIONE LIKE '%ID_ELAB%'
				),
				ID_ELAB AS 
				(
				 SELECT IIF(ID_EVENTO IS NULL OR ID_EVENTO=0,0,ID_EVENTO) AS ID_EVENTO 
				 FROM ID_EVENTO
				)
				SELECT @ID_ELAB = 
				(SELECT CASE WHEN ID_EVENTO <= 0 THEN 'ID_ELAB: [1], ' 
				             ELSE (SELECT 'ID_ELAB: ['+
							              +CAST(CAST(SUBSTRING(TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),
											         CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)+1,
											         CHARINDEX(']',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)-
											         CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)-1)
							                         AS INTEGER)+1 
											    AS VARCHAR(50))+'], ' 
									FROM dbo.LogEventi 
									WHERE ID_EVENTO = (SELECT DISTINCT ID_EVENTO FROM ID_ELAB))
							END AS ID_ELAB
				 FROM ID_ELAB)
	
				 SET @ESITO = 1
			END
	
		END TRY
	
		BEGIN CATCH
	
			SET @ESITO = -2
	
		END CATCH
END 
GO
CREATE OR ALTER PROCEDURE [dbo].[SP_LogFlussi] 
(
 @DESCRIZIONE    AS VARCHAR(1000)		  ,
 @MAIN_PROCEDURE AS VARCHAR(1000)		  ,
 @PARAMETRI      AS VARCHAR(1000)		  ,
 @NOTA           AS VARCHAR(4000)		  ,
 @C_RUOLO        AS VARCHAR(100)		  ,
 @SESSIONID      AS VARCHAR(40)			  ,
 @USERID         AS VARCHAR(30)			  ,
 @TIMESTAMP      AS SMALLDATETIME         ,
 @ESITO			 AS INTEGER			OUTPUT,
 @NR_LOG         AS INTEGER               ,
 @LOG            AS VARCHAR(4000)         ,
 @EVENTO		 AS INTEGER               ,
 @ID_ELAB        AS VARCHAR(50)
)
AS
BEGIN
	DECLARE @ERROR_MESSAGE   AS VARCHAR(8000) =   ERROR_MESSAGE(),
		    @ERROR_NUMBER    AS INTEGER       =   ERROR_NUMBER(),
		    @ERROR_SEVERITY  AS INTEGER       =   ERROR_SEVERITY(),
		    @ERROR_STATE     AS INTEGER       =   ERROR_STATE(),
			@ERROR_LINE      AS INTEGER       =   ERROR_LINE(),
			@ERROR_PROCEDURE AS VARCHAR(8000) =   ERROR_PROCEDURE()
	BEGIN TRY

		IF @ESITO <> 0 
		BEGIN 
		 
			INSERT INTO KG_GUEST.dbo.LogEventi
				        (DESCRIZIONE, MAIN_PROCEDURE, PARAMETRI, NOTA, C_RUOLO, SESSIONID, USERID, TIMESTAMP)
			SELECT @DESCRIZIONE, @MAIN_PROCEDURE, @PARAMETRI, @NOTA, @C_RUOLO, @SESSIONID, @USERID, @TIMESTAMP 
		
		END

	END TRY

	BEGIN CATCH

		SELECT  @ERROR_MESSAGE   = ERROR_MESSAGE(),
		        @ERROR_NUMBER    = ERROR_NUMBER(),
			    @ERROR_SEVERITY  = ERROR_SEVERITY(),
			    @ERROR_STATE     = ERROR_STATE(),
			    @ERROR_LINE      = ERROR_LINE(),
			    @ERROR_PROCEDURE = ERROR_PROCEDURE()
		SET @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME)
		DECLARE @ERROR AS VARCHAR(4000) 
		SET @ESITO = 0
		SET @DESCRIZIONE = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(5))+
		                   +'], ESITO: [0]'+', EVENTO_LOG_INSERT_ERROR_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		SET @ERROR = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(5))+
		             +'], ESITO: [0], EVENTO_LOG_INSERT_ERROR_'+CAST(@EVENTO AS VARCHAR(10))        +': {'+														+'  '+
					 +'ERROR_NUMBER: ['   +ISNULL(CAST(@ERROR_NUMBER   AS VARCHAR(20)),'')+']'		+', ' +
					 +'ERROR_SEVERITY: [' +ISNULL(CAST(@ERROR_SEVERITY AS VARCHAR(20)),'')+']'		+', ' +  
					 +'ERROR_LINE: ['     +ISNULL(CAST(@ERROR_LINE     AS VARCHAR(20)),'')+']'		+', ' +      
					 +'ERROR_STATE: ['    +ISNULL(CAST(@ERROR_STATE    AS VARCHAR(20)),'')+']'		+', ' +     
					 +'ERROR_MESSAGE: ['  +ISNULL(@ERROR_MESSAGE,'')+'] }'	
		INSERT INTO KG_GUEST.dbo.LogEventi
			        (DESCRIZIONE, MAIN_PROCEDURE, PARAMETRI, NOTA, C_RUOLO, SESSIONID, USERID, TIMESTAMP)
		SELECT @DESCRIZIONE, @MAIN_PROCEDURE, @PARAMETRI, @ERROR, @C_RUOLO, @SESSIONID, @USERID, @TIMESTAMP

	END CATCH

RETURN
END
GO
CREATE OR ALTER TRIGGER [dbo].[TRG_LogFlussi]
ON [dbo].[LogEventi]
AFTER INSERT
AS
BEGIN
	DECLARE @TIMESTAMP       AS SMALLDATETIME = CAST(GETDATE() AS SMALLDATETIME)
	DECLARE @NOTA			 AS VARCHAR(4000) = ''
	DECLARE @DESCRIZIONE     AS VARCHAR(4000) = ''
	DECLARE @SUSER_ID        AS VARCHAR(100)  = 'SUSER_ID: ['+ISNULL(CAST(SUSER_ID(SUSER_SNAME()) AS VARCHAR(50)),'')+']'
	DECLARE @USERID		     AS VARCHAR(50)   = @SUSER_ID
	DECLARE @SESSION_ID      AS VARCHAR(100)  = 'SESSION_ID: ['+ISNULL(CAST(@@SPID AS VARCHAR(50)),'')+']'
	/*********************************************************************************/
	INSERT INTO KG_GUEST.dbo.LogErrori 
	           (DESCRIZIONE, MAIN_PROCEDURE, USERID, TIMESTAMP)
	SELECT  'ID_EVENTO_RIGA_ERRORE: ['+CAST(ID_EVENTO AS VARCHAR(10))   +'], '+
	       +'ID_EVENTO_RIGA_TRIGGER: ['+CAST(ID_EVENTO+1 AS VARCHAR(10))+'], '+
	       +DESCRIZIONE+', '+NOTA													 AS DESCRIZIONE,
	        MAIN_PROCEDURE															 AS MAIN_PROCEDURE,
		    USERID																	 AS USERID,
		    TIMESTAMP																 AS TIMESTAMP
	FROM INSERTED
	WHERE NOTA LIKE '%ERROR_NUMBER%ERROR_MESSAGE%'
	/*********************************************************************************/
	SET @DESCRIZIONE = 'ESITO: [-1], EVENTO_LOG_TRIGGER: [Completata Fase Caricamento Errore Precedente in KG_Guest.dbo.LogErrori]'
	SET @NOTA = 'ESITO: [-1], EVENTO_TRIGGER: [KG_Guest.dbo.TRG_LogFlussi Eseguito su KG_Guest.dbo.LogEventi]'
	INSERT INTO KG_GUEST.dbo.LogEventi
		        (DESCRIZIONE, MAIN_PROCEDURE, PARAMETRI, NOTA, C_RUOLO, SESSIONID, USERID, TIMESTAMP)
	SELECT 'ID_ELAB: ['+SUBSTRING(TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),
           CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)+1,
	       CHARINDEX(']',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)-
	       CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)-1)
		   +'], '+
		   'NR_LOG: ['+SUBSTRING(TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),
           CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),1)+1,
	       CHARINDEX(']',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),1)-
	       CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),1)-1)
		   +'], '+
		   +@DESCRIZIONE																									AS DESCRIZIONE,
		   'TR: [TRG_LogFlussi], TR_ID: ['+ISNULL(CAST(@@SPID AS VARCHAR(100)),'NULL')+']'									AS MAIN_PROCEDURE,
		   NULL																												AS PARAMETRI,
		   'ID_ELAB: ['+SUBSTRING(TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),
           CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)+1,
	       CHARINDEX(']',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)-
	       CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('ID_ELAB: ',DESCRIZIONE,1)-LEN('ID_ELAB: ')+1)),1)-1)
		   +'], '+
		   'NR_LOG: ['+SUBSTRING(TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),
           CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),1)+1,
	       CHARINDEX(']',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),1)-
	       CHARINDEX('[',TRIM(' ' FROM RIGHT(DESCRIZIONE,LEN(DESCRIZIONE)-CHARINDEX('NR_LOG: ',DESCRIZIONE,1)-LEN('NR_LOG: ')+1)),1)-1)
		   +'], '
		   +@NOTA																											AS NOTA,
		    C_RUOLO																											AS C_RUOLO,
		    @SESSION_ID																										AS SESSIONID,
		    @USERID																											AS USERID,
		    @TIMESTAMP																										AS TIMESTAMP
	FROM INSERTED
	WHERE NOTA LIKE '%ERROR_NUMBER%ERROR_MESSAGE%'
	/*********************************************************************************/  
END
GO
ALTER TABLE [dbo].[LogEventi] ENABLE TRIGGER [TRG_LogFlussi]
GO
CREATE OR ALTER FUNCTION [dbo].[FNTB_Calendar_Italian]
(
 @ANNO AS VARCHAR(4) 
)
RETURNS @TB TABLE
(
 TIMELINE VARCHAR(15) NULL
)
AS 
BEGIN
	/*****************************Italian Holidays*****************************/
	DECLARE @HOLIDAYSLIST AS VARCHAR(1000)
	DECLARE @YEARS        AS VARCHAR(4)    = @ANNO
	SET @HOLIDAYSLIST = 
	    (SELECT @YEARS+'-01-01'+', '+
	           +@YEARS+'-01-06'+', '+
		       +@YEARS+'-04-25'+', '+
		       +@YEARS+'-05-01'+', '+
		       +@YEARS+'-06-02'+', '+
		       +@YEARS+'-08-15'+', '+
		       +@YEARS+'-11-01'+', '+
		       +@YEARS+'-12-08'+', '+
		       +@YEARS+'-12-25'+', '+
		       +@YEARS+'-12-26')
	/*****************************Calculate Easter*****************************/
	DECLARE	@YEAR          AS VARCHAR(4),
		    @C             AS INTEGER   , 
		    @N             AS INTEGER   , 
		    @K             AS INTEGER   , 
		    @I             AS INTEGER   , 
		    @J             AS INTEGER   , 
		    @L             AS INTEGER   , 
		    @M             AS INTEGER   , 
		    @D             AS INTEGER   , 
		    @EASTER        AS DATE      ,
			@EASTER_MONDAY AS DATE
	SET @YEAR = @YEARS
	SET @C    = (@YEAR / 100) 
	SET @N    = @YEAR - 19 * (@YEAR / 19) 
	SET @K    = (@C - 17) / 25 
	SET @I    = @C - @C / 4 - ( @C - @K) / 3 + 19 * @N + 15 
	SET @I    = @I - 30 * ( @I / 30 ) 
	SET @I    = @I - (@I / 28) * (1 - (@I / 28) * (29 / (@I + 1)) * ((21 - @N) / 11)) 
	SET @J    = @YEAR + @YEAR / 4 + @I + 2 - @C + @C / 4 
	SET @J    = @J - 7 * (@J / 7) 
	SET @L    = @I - @J 
	SET @M    = 3 + (@L + 40) / 44 
	SET @D    = @L + 28 - 31 * ( @M / 4 ) 
	SET @EASTER =
	    (
		 SELECT CONVERT(VARCHAR(4),@YEAR)              + '-' +
			   + RIGHT('0' + CONVERT(VARCHAR(2),@M),2) + '-' +
			   + RIGHT('0' + CONVERT(VARCHAR(2),@D),2)
		)
	SET @EASTER_MONDAY = DATEADD(DAY,+1,@EASTER)
	SET @HOLIDAYSLIST = (SELECT CONCAT_WS(', ',@HOLIDAYSLIST,@EASTER,@EASTER_MONDAY))
	;
	/*****************************Avoiding Sunday & Saturday*****************************/
	WITH 
	DT AS
	(
	 SELECT CAST(TRIM(VALUE) AS DATE) AS VALUE 
	 FROM STRING_SPLIT(@HOLIDAYSLIST,',')
	),
	VL AS 
	(
	 SELECT TOP (SELECT COUNT(*) FROM DT) WITH TIES VALUE
	 FROM DT 
	 ORDER BY 1 ASC
	)
	SELECT @HOLIDAYSLIST = STRING_AGG(VALUE,', ')
	FROM VL
	DECLARE @START AS DATE = CAST(@YEARS+'-01-01' AS DATE),
	        @END   AS DATE = CAST(@YEARS+'-12-31' AS DATE)
	WHILE @START <= @END
	BEGIN
		IF @START NOT IN (SELECT TRIM(VALUE) 
		                  FROM STRING_SPLIT(@HOLIDAYSLIST,','))
		   AND
		   FORMAT(@START,'dddd') NOT IN ('Sunday','Saturday','Domenica','Sabato')
		   
		BEGIN
			INSERT INTO @TB (TIMELINE)
			SELECT @START
		END
		SET @START = DATEADD(DAY,+1,@START)
		CONTINUE
	END
RETURN
END
GO
USE [KG_GUEST]
GO
CREATE OR ALTER FUNCTION [dbo].[FNIN_DayWork_by_Location]
(
 @ANNO   AS VARCHAR(4)  ,
 @MESE   AS VARCHAR(200),
 @GIORNO AS VARCHAR(200),
 @SEDE   AS VARCHAR(200)
)
RETURNS @T TABLE
(
 TIMELINE DATETIME NULL
)
AS 
BEGIN
	SET @ANNO   = IIF(TRIM(@ANNO)='',  NULL,TRIM(@ANNO))
	SET @MESE   = IIF(TRIM(@MESE)='',  NULL,TRIM(@MESE))
	SET @GIORNO = IIF(TRIM(@GIORNO)='',NULL,TRIM(@GIORNO))
	DECLARE @TB AS TABLE 
	(
	 ROWS     INTEGER NULL,
	 TIMELINE DATE    NULL
	)
	;
	WITH 
	VL AS 
	(
	 SELECT ISNULL(EMPLOYEE_COMPANY_HOLIDAYS,'') AS EMPLOYEE_COMPANY_HOLIDAYS 
	 FROM dbo.ANAG_EMPLOYEE_COMPANY 
	 WHERE TRIM(EMPLOYEE_COMPANY_LOCATION) = TRIM(@SEDE)
	),
	DT AS
	(
	 SELECT DISTINCT TRIM(VALUE) AS VALUE 
	 FROM STRING_SPLIT((SELECT EMPLOYEE_COMPANY_HOLIDAYS FROM VL),',')
	),
	DM AS 
	(
	 SELECT TIMELINE
	 FROM dbo.FNTB_Calendar_Italian(ISNULL(@ANNO,YEAR(GETDATE())))
     WHERE TIMELINE NOT IN (SELECT CAST(YEAR(TIMELINE) AS CHAR(4))+'-'+VALUE FROM DT)
	)
	INSERT INTO @TB (ROWS, TIMELINE)
	SELECT ROW_NUMBER() OVER (ORDER BY TIMELINE ASC) AS ROWS, 
	       CAST(TIMELINE AS DATE)                    AS TIMELINE
	FROM DM
	WHERE  (TRIM(@ANNO)   IS NULL OR YEAR(CAST(TIMELINE  AS DATE)) = TRIM(@ANNO)) 
	   AND (TRIM(@MESE)   IS NULL OR MONTH(CAST(TIMELINE AS DATE)) IN (SELECT DISTINCT VALUE FROM STRING_SPLIT(TRIM(@MESE),',')))
	   AND (TRIM(@GIORNO) IS NULL OR DAY(CAST(TIMELINE   AS DATE)) IN (SELECT DISTINCT VALUE FROM STRING_SPLIT(TRIM(@GIORNO),',')))
	;
	DECLARE @TB_MIN  AS INTEGER = (SELECT MIN(ROWS) FROM @TB)
	DECLARE @TB_MAX  AS INTEGER = (SELECT MAX(ROWS) FROM @TB)
	DECLARE @TB_DATE AS DATE
	WHILE @TB_MIN <= @TB_MAX
	BEGIN
		SET @TB_DATE = (SELECT CAST(TIMELINE AS DATE) FROM @TB WHERE ROWS = @TB_MIN)
		DECLARE @MIN_HR AS DATETIME = (SELECT CONVERT(DATETIME,CAST(@TB_DATE AS VARCHAR(20))+' 00:00:00'))
		DECLARE @MAX_HR AS DATETIME = (SELECT CONVERT(DATETIME,CAST(@TB_DATE AS VARCHAR(20))+' 23:45:00'))
		WHILE @MIN_HR <= @MAX_HR
		BEGIN
			INSERT INTO @T (TIMELINE)
			SELECT @MIN_HR AS TIMELINE
		SET @MIN_HR = DATEADD(MINUTE,+15,@MIN_HR)
		CONTINUE
		END 
	SET @TB_MIN += 1
	CONTINUE
	END
RETURN
END
GO
--SELECT * FROM dbo.FNIN_DayWork_by_Location('2024','10,11','21,22','MILANO')
/*
 @ANNO: one value, @MESE: multiple values, @GIORNO: multiple values, @SEDE: one value
*/ 
GO
IF (SELECT COUNT(*) FROM KG_GUEST.DBO.ANAG_SET_ROLES) = 0
BEGIN
	INSERT INTO KG_GUEST.DBO.ANAG_SET_ROLES (ROLES_CODE, ROLES_DESCR)
	VALUES ('KG_ADMIN','Administrator'), 
	       ('KG_ORGANIZATION','Supervisor'),
		   ('KG_USER','User')
END
GO

USE [KG_GUEST]
GO
CREATE OR ALTER PROCEDURE [dbo].[SP_ANAG_EMPLOYEE_COMPANY]
(
 @TipoAzione				  VARCHAR(1)            , 
 @Employee_Company_ID         INTEGER               ,
 @Employee_Company_Name       VARCHAR(200)          ,
 @Employee_Company_Location   VARCHAR(200)          ,
 @Employee_Company_Address    VARCHAR(200)          ,
 @Employee_Company_Country    VARCHAR(200)          ,
 @Employee_Company_Holidays   VARCHAR(200)          ,
 @Nota_tb                     VARCHAR(1000)         ,
 @LogRuolo					  VARCHAR(20)           ,
 @LogUser					  VARCHAR(30)           , 
 @LogSession				  VARCHAR(40)           ,
 @MessaggioExit				  VARCHAR(2000) OUTPUT  ,
 @Lock						  VARCHAR(200) 
)
AS
BEGIN

    SET NOCOUNT ON
	DECLARE @ERROR_MESSAGE   AS VARCHAR(8000) =  ERROR_MESSAGE(),
		    @ERROR_NUMBER    AS INTEGER       =  ERROR_NUMBER(),
		    @ERROR_SEVERITY  AS INTEGER       =  ERROR_SEVERITY(),
		    @ERROR_STATE     AS INTEGER       =  ERROR_STATE(),
			@ERROR_LINE      AS INTEGER       =  ERROR_LINE(),
			@ERROR_PROCEDURE AS VARCHAR(8000) =  ERROR_PROCEDURE()
	DECLARE @SPID			 AS INTEGER       =  @@SPID
	DECLARE @SP_NAME		 AS VARCHAR(100)  = 'SP: [SP_ANAG_EMPLOYEE_COMPANY], SP_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
	DECLARE @SUSER_SNAME     AS VARCHAR(100)  = 'SUSER_SNAME: ['+ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'')+']',
	        @SUSER_ID        AS VARCHAR(100)  = 'SUSER_ID: ['+ISNULL(CAST(SUSER_ID(SUSER_SNAME()) AS VARCHAR(50)),'')+']',
			@SERVER_NAME     AS VARCHAR(100)  = 'SERVER_NAME: ['+ISNULL(CAST(@@SERVERNAME AS VARCHAR(100)),'')+']',
			@DB_NAME         AS VARCHAR(200)  = 'DB_NAME: ['+ISNULL(CAST(DB_NAME() AS VARCHAR(50)),'')+']',
			@HOST_ID         AS VARCHAR(100)  = 'HOST_ID: ['+ISNULL(TRIM(' ' FROM CAST(HOST_ID() AS VARCHAR(50))),'')+']',
			@HOST_NAME       AS VARCHAR(200)  = 'HOST_NAME: ['+ISNULL(CAST(HOST_NAME() AS VARCHAR(50)),'')+']',
			@SESSION_ID      AS VARCHAR(100)  = 'SESSION_ID: ['+ISNULL(CAST(@SPID AS VARCHAR(50)),'')+']',
			@PROGRAM_NAME    AS VARCHAR(100)  = 'PROGRAM_NAME: ['+ISNULL(CAST(PROGRAM_NAME() AS VARCHAR(100)),'')+']',
			@HOST_PROCESS_ID AS VARCHAR(100)  = 'HOST_PROCESS_ID: ['+ISNULL(CAST((SELECT DISTINCT HOST_PROCESS_ID 
			                                                                      FROM SYS.DM_EXEC_SESSIONS 
																		          WHERE SESSION_ID=@SPID) AS VARCHAR(50)),'')+']', 
			@DB_PRINCIPAL_ID AS VARCHAR(200)  = 'DATABASE_PRINCIPAL_ID: ['+ISNULL(CAST(DATABASE_PRINCIPAL_ID(SUSER_SNAME()) AS VARCHAR(50)),'-')+']',
			@DB_ID			 AS VARCHAR(200)  = 'DB_ID: ['+ISNULL(CAST(DB_ID(DB_NAME()) AS VARCHAR(50)),'')+']',
			@SCHEMA_NAME     AS VARCHAR(100)  = 'SCHEMA_NAME: ['+ISNULL(CAST(SCHEMA_NAME() AS VARCHAR(50)),'')+']',
			@SCHEMA_ID       AS VARCHAR(100)  = 'SCHEMA_ID: ['+ISNULL(CAST(SCHEMA_ID(SCHEMA_NAME()) AS VARCHAR(50)),'')+']',
			@ROLES_USER      AS VARCHAR(200)  = ( 
												 SELECT 'ROLES_USER_DB: ['+ISNULL(STRING_AGG(ROLE_PRINCIPAL_NAME,', ') 
												 	                              WITHIN GROUP (ORDER BY ROLE_PRINCIPAL_NAME ASC),'-')+']' AS ROLE_DB
												 FROM (
												       SELECT R.NAME AS ROLE_PRINCIPAL_NAME,
												              M.NAME AS MEMBER_PRINCIPAL_NAME
												 	   FROM SYS.DATABASE_ROLE_MEMBERS AS RM 
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS R ON RM.ROLE_PRINCIPAL_ID = R.PRINCIPAL_ID
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS M ON RM.MEMBER_PRINCIPAL_ID = M.PRINCIPAL_ID
												 	   WHERE M.NAME = SUSER_SNAME() 
												      ) AS T
												)
	DECLARE @RUOLO AS VARCHAR(100)  = 'RUOLO: ['+ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL')+
	                                   +IIF(ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL')+
									   +IIF(ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'NULL')+']'
	DECLARE @NOTA  AS VARCHAR(4000) =  'SP_MAIN: [PR_ANAG_EMPLOYEE_COMPANY], SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.PR_ANAG_EMPLOYEE_COMPANY','P') AS VARCHAR(20)),'')+'], '+
	                                  +@SERVER_NAME+', '+@PROGRAM_NAME+', '+@HOST_ID+', '+@HOST_NAME+', '+@HOST_PROCESS_ID+', '+
	                                  +@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID+', '+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME
	DECLARE @LOG            AS VARCHAR(4000) = ''
	DECLARE @DESCRIZIONE_SP AS VARCHAR(4000) = ''
	SELECT  @EMPLOYEE_COMPANY_NAME     = TRIM(@Employee_Company_Name),
	        @EMPLOYEE_COMPANY_LOCATION = TRIM(@Employee_Company_Location),
	        @EMPLOYEE_COMPANY_ADDRESS  = TRIM(@Employee_Company_Address),
	        @EMPLOYEE_COMPANY_COUNTRY  = TRIM(@Employee_Company_Country),
	        @EMPLOYEE_COMPANY_HOLIDAYS = TRIM(@Employee_Company_Holidays),
	        @NOTA_TB                   = TRIM(@Nota_tb)
	DECLARE @PARAMETRI		AS VARCHAR(1000) = 'PARAMETRI: '+
											   +'@TipoAzione AS VARCHAR(1) = '                    +IIF(@TipoAzione IS NULL,'NULL',''''+@TipoAzione+'''')                                       +', '+
											   +'@Employee_Company_ID AS INTEGER = '              +IIF(@Employee_Company_ID IS NULL,'NULL',''''+CAST(@Employee_Company_ID AS VARCHAR(20))+'''')+', '+
											   +'@Employee_Company_Name AS VARCHAR(200) = '       +IIF(@Employee_Company_Name IS NULL,'NULL',''''+@Employee_Company_Name+'''')                 +', '+
	                                           +'@Employee_Company_Location AS VARCHAR(200) = '   +IIF(@Employee_Company_Location IS NULL,'NULL',''''+@Employee_Company_Location+'''')         +', '+
											   +'@Employee_Company_Address AS VARCHAR(200) = '    +IIF(@Employee_Company_Address IS NULL,'NULL',''''+@Employee_Company_Address+'''')           +', '+
											   +'@Employee_Company_Country AS VARCHAR(200) = '    +IIF(@Employee_Company_Country IS NULL,'NULL',''''+@Employee_Company_Country+'''')           +', '+
											   +'@Employee_Company_Holidays AS VARCHAR(200) = '   +IIF(@Employee_Company_Holidays IS NULL,'NULL',''''+@Employee_Company_Holidays+'''')         +', '+
											   +'@Nota AS VARCHAR(1000) = '                       +IIF(@Nota_tb IS NULL,'NULL',''''+@Nota_tb+'''')                                             +', '+   
											   +'@LogRuolo AS VARCHAR(20) = '                     +IIF(@LogRuolo IS NULL,'NULL',''''+@LogRuolo+'''')                                           +', '+
											   +'@LogUser AS VARCHAR(30) = '                      +IIF(@LogUser IS NULL,'NULL',''''+@LogUser+'''')                                             +', '+
											   +'@LogSession AS VARCHAR(40) = '                   +IIF(@LogSession IS NULL,'NULL',''''+@LogSession+'''')                                       +', '+
											   +'@MessaggioExit AS VARCHAR(2000) OUTPUT = '       +IIF(@MessaggioExit IS NULL,'NULL',''''+@MessaggioExit+'''')
	DECLARE @TIMESTAMP      AS SMALLDATETIME = CAST(GETDATE() AS SMALLDATETIME)
	DECLARE @USERID		    AS VARCHAR(50)   = @SUSER_ID
	DECLARE @EVENTO			AS INTEGER		 = 0
	DECLARE @NR_LOG 		AS INTEGER		 = 0
	DECLARE @ESITO          AS INTEGER       = 1
	DECLARE @ID_ELAB        AS VARCHAR(50)          
	
	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - START */
	
	EXEC dbo.SP_LogEventiElabID @ESITO=@ESITO OUTPUT, @ID_ELAB=@ID_ELAB OUTPUT

	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - END   */


	BEGIN TRY
		/************************************************************************************************************************************************************/
	    
		/* FIXED INPUT START */

		IF @ESITO = -1
		BEGIN
		    SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_EMPLOYEE_COMPANY'
			RAISERROR('Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP',11,19)
		END
		
		IF @ESITO = -2
		BEGIN
			SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_EMPLOYEE_COMPANY'
			RAISERROR('Generato in Fase di Definizione ID_ELAB per dbo.LogEventi',11,19)
		END

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Avviata Correttamente ed in Esecuzione {'+REPLACE(@ID_ELAB,', ','}')+
				           +' - '+ISNULL(@Lock,'')+': KG_Guest.dbo.SP_ANAG_EMPLOYEE_COMPANY'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_START_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END	

		/* FIXED INPUT END */

		/************************************************************************************************************************************************************/
		/* START EXECUTE SCRIPTS */



	    IF @ESITO = 1 AND (@TipoAzione IS NULL OR @TipoAzione NOT IN ('I','U','D'))
	    BEGIN
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 1,
				  @LOG = 'Avviata Fase Elaborazione',
				  @MessaggioExit = 'Tipo Azione Richiamata diversa da Inserimento, Aggiornamento e Cancellazione, Seleziona Uno dei Seguenti Parametri (''I'',''U'',''D'')'
		   RAISERROR(@MessaggioExit,11,19)
	    END

	   
	   /* ------------------------------------------------------------------------------------------------------------------------------ */


	   IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE     EMPLOYEE_COMPANY_NAME     = @Employee_Company_Name  
				     AND EMPLOYEE_COMPANY_ADDRESS  = @Employee_Company_Address  
					 AND EMPLOYEE_COMPANY_LOCATION = @Employee_Company_Location  
					 AND EMPLOYEE_COMPANY_COUNTRY  = @Employee_Company_Country
		      ) > 0
		BEGIN
			/* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 2,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Profilo Aziendale'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Profilo Aziendale Richiamato Gia Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
							    END+' Profilo Aziendale'
		   RAISERROR(@MessaggioExit,11,19)
		END
		

		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE     EMPLOYEE_COMPANY_NAME     = @Employee_Company_Name  
				     AND EMPLOYEE_COMPANY_ADDRESS  = @Employee_Company_Address  
					 AND EMPLOYEE_COMPANY_LOCATION = @Employee_Company_Location  
					 AND EMPLOYEE_COMPANY_COUNTRY  = @Employee_Company_Country
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 2,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Profilo Aziendale'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   INSERT INTO KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY 
		              (EMPLOYEE_COMPANY_NAME, EMPLOYEE_COMPANY_LOCATION, EMPLOYEE_COMPANY_ADDRESS,
					   EMPLOYEE_COMPANY_COUNTRY, EMPLOYEE_COMPANY_HOLIDAYS, NOTA)
		   SELECT @Employee_Company_Name     AS EMPLOYEE_COMPANY_NAME,
		          @Employee_Company_Location AS EMPLOYEE_COMPANY_LOCATION,
				  @Employee_Company_Address  AS EMPLOYEE_COMPANY_ADDRESS,
				  @Employee_Company_Country  AS EMPLOYEE_COMPANY_COUNTRY,
				  @Employee_Company_Holidays AS EMPLOYEE_COMPANY_HOLIDAYS,
				  @Nota_tb                   AS NOTA
		   /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Inserimento Profilo Aziendale Completata Correttamente ; Righe Inserite: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 2,
			      @LOG = 'Completata Fase Inserimento Nuovo Profilo Aziendale per dbo.ANAG_EMPLOYEE_COMPANY --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */



	    IF @ESITO = 1 AND @TipoAzione IN ('U','D')
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID 
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						                   WHEN 'D' THEN 'Cancellazione'              
						  END+' Profilo Aziendale'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Profilo Aziendale Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						                         WHEN 'D' THEN 'Cancellazione'  
							    END+' Profilo Aziendale'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'U'
	      AND (
		       SELECT EMPLOYEE_COMPANY_ID 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'           
						  END+' Profilo Aziendale'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   UPDATE KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
		   SET EMPLOYEE_COMPANY_NAME     = @Employee_Company_Name,  
			   EMPLOYEE_COMPANY_ADDRESS  = @Employee_Company_Address,  
			   EMPLOYEE_COMPANY_LOCATION = @Employee_Company_Location,  
			   EMPLOYEE_COMPANY_COUNTRY  = @Employee_Company_Country,
			   EMPLOYEE_COMPANY_HOLIDAYS = @Employee_Company_Holidays,
			   NOTA                      = @Nota_tb
		   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID
		/* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Aggiornamento Profilo Aziendale Completata Correttamente ; Righe Aggiornate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 3,
			      @LOG = 'Completata Fase Aggiornamento Profilo Aziendale per dbo.ANAG_EMPLOYEE_COMPANY --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'D'
		   AND (
		        SELECT COUNT(*) 
		        FROM KG_GUEST.DBO.REGISTER 
				WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID
			   ) > 0
		BEGIN
			/* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 4, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'           
						  END+' Profilo Aziendale'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Profilo Aziendale Non Cancellato Perche Attivo ed Utilizzato in Registro Presenze, Check per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'  
							    END+' Profilo Aziendale'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'D'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 5, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'           
						  END+' Profilo Aziendale'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   DELETE FROM KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY
		   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID 
		  /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Cancellazione Profilo Aziendale Completata Correttamente ; Righe Cancellate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 6, @EVENTO = 3,
			      @LOG = 'Completata Fase Cancellazione Profilo Aziendale per dbo.ANAG_EMPLOYEE_COMPANY --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END



		/* END EXECUTE SCRIPTS */
		/************************************************************************************************************************************************************/
		
		/* FIXED OUTPUT START */

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Conclusa ed Eseguita Correttamente {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_EMPLOYEE_COMPANY'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END
		

		IF @ESITO = 0 
		BEGIN
			SELECT @ESITO = -1, @LOG = 'SP Interrotta a seguito di Inserimento LOG Errore Precedente'
			RAISERROR('SP Conclusa con Errore in Fase di Inserimento LOG',11,19)
		END

		/* FIXED OUTPUT END   */

		/************************************************************************************************************************************************************/

		SET @ESITO = 1

	END TRY
	
	BEGIN CATCH 
	
			DECLARE @ERROR AS VARCHAR(4000) 
			SELECT  @ERROR_MESSAGE   = ERROR_MESSAGE(),
				    @ERROR_NUMBER    = ERROR_NUMBER(),
					@ERROR_SEVERITY  = ERROR_SEVERITY(),
					@ERROR_STATE     = ERROR_STATE(),
					@ERROR_LINE      = ERROR_LINE(),
					@ERROR_PROCEDURE = ERROR_PROCEDURE()
			SET @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME)
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SET @LOG = REPLACE(@LOG,'Avviata Fase','Fallita Fase')
				SET @ERROR = 'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				            +'], ESITO: [-1], EVENTO_LOG_ERRORE: {'																+'  ' +
							+'ERROR_NUMBER: ['   +ISNULL(CAST(@ERROR_NUMBER   AS VARCHAR(20)),'')+']'							+', ' +
							+'ERROR_SEVERITY: [' +ISNULL(CAST(@ERROR_SEVERITY AS VARCHAR(20)),'')+']'							+', ' +  
							+'ERROR_LINE: ['     +ISNULL(CAST(@ERROR_LINE     AS VARCHAR(20)),'')+']'							+', ' +      
							+'ERROR_STATE: ['    +ISNULL(CAST(@ERROR_STATE    AS VARCHAR(20)),'')+']'							+', ' +     
							+'ERROR_MESSAGE: ['  +'3; Errore: '+ISNULL(@ERROR_MESSAGE,'')+']'									+', ' + 
							+'ERROR_PROCEDURE: ['+ISNULL(@ERROR_PROCEDURE,'')+'] } '		                                    +', ' +
							+'SP_MAIN: [PR_ANAG_EMPLOYEE_COMPANY], '+
							+'SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.PR_ANAG_EMPLOYEE_COMPANY','P') AS VARCHAR(20)),'')  +'], '+
							+@SERVER_NAME+', '+@PROGRAM_NAME+', '+@SESSION_ID												    +', ' +
							+@HOST_ID+', ' +@HOST_NAME+', '+@HOST_PROCESS_ID+', '+@SUSER_ID+', '+@SUSER_SNAME				    +', ' +
							+@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID													    +', ' +
							+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME	
				SET @MessaggioExit = '3; Errore '+
				                         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento' 
						                                   WHEN 'U' THEN 'Aggiornamento' 
										                   WHEN 'D' THEN 'Cancellazione' 
														   ELSE 'Generico' END+': '+@ERROR_MESSAGE
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				                     +'], ESITO: [-1]'+
				                     +CASE @ERROR_MESSAGE WHEN 'Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP'
									                      THEN ', EVENTO_LOG_START_'
														  WHEN 'Generato in Fase di Definizione ID_ELAB per dbo.LogEventi'
														  THEN ', EVENTO_LOG_START_'
														  ELSE ', EVENTO_LOG_' END
									 +CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+' --> '+@MessaggioExit+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@ERROR, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
				       @LOG = 'SP Conclusa con Errori {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_EMPLOYEE_COMPANY'
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [-1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
		END CATCH

END
GO
USE [KG_GUEST]
GO
CREATE OR ALTER PROCEDURE [dbo].[PR_ANAG_EMPLOYEE_COMPANY]
 ( 
    @TipoAzione                  VARCHAR(1)            ,
	@Employee_Company_ID         INTEGER               ,
	@Employee_Company_Name       VARCHAR(200)          ,
    @Employee_Company_Location   VARCHAR(200)          ,
    @Employee_Company_Address    VARCHAR(200)          ,
    @Employee_Company_Country    VARCHAR(200)          ,
    @Employee_Company_Holidays   VARCHAR(200)          ,
    @Nota_tb                     VARCHAR(1000)         ,
	@LogRuolo                    VARCHAR(20)           ,
	@LogUser                     VARCHAR(30)           ,
	@LogSession                  VARCHAR(40)           ,
	@MessaggioExit               VARCHAR(2000) OUTPUT
 )
/* PERFORMS A TASK IN A CRITICAL SECTION OF CODE THAT CAN ONLY BE RUN
   BY ONE SESSION AT A TIME. THE TASK IS SIMULATED BY A WAIT  */
AS
BEGIN
	DECLARE @ESITO AS VARCHAR(100)
	DECLARE @RC_TB AS TABLE 
	(
	 RETURN_CODE INTEGER      NULL,
	 STATUS_RC   VARCHAR(100) NULL
	)
	INSERT INTO @RC_TB (RETURN_CODE, STATUS_RC)
	SELECT 0    AS RC, 'BLOCCO CONCESSO IN MODO SINCRONO'                             AS STATUS_RC
	UNION ALL
	SELECT 1    AS RC, 'BLOCCO CONCESSO DOPO RILASCIO DI ALTRI BLOCCHI INCOMPATIBILI' AS STATUS_RC
	UNION ALL
	SELECT -1   AS RC, 'RICHIESTA DI BLOCCO SCADUTA'                                  AS STATUS_RC
	UNION ALL
	SELECT -2   AS RC, 'RICHIESTA DI BLOCCO ANNULLATA'                                AS STATUS_RC
	UNION ALL
	SELECT -3   AS RC, 'RICHIESTA DI BLOCCO RISULTA VITTIMA DI DEADLOCK'              AS STATUS_RC
	UNION ALL
	SELECT -999 AS RC, 'ERRORE DI CONVALIDA DI UN PARAMETRO O ERRORE DI CHIAMATA'     AS STATUS_RC	
	/*-------------------------------------------------------------------------------------------------------------------------*/
	DECLARE @RC  AS INTEGER       = 0, -- RETURN CODE
	        @MSG AS VARCHAR(2000)
	SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' CRITICAL_SECTION_WORKER STARTING'+': PR_ANAG_EMPLOYEE_COMPANY'
	RAISERROR (@MSG,0,1) WITH NOWAIT 
	BEGIN TRY
		BEGIN TRAN
			IF @@TRANCOUNT > 0
			BEGIN
				SET @MSG = CONVERT(VARCHAR,GETDATE(),121) + ' REQUESTING LOCK'
				RAISERROR (@MSG,0,1) WITH NOWAIT
				EXEC @RC = SP_GETAPPLOCK @RESOURCE    = 'dbo.PR_ANAG_EMPLOYEE_COMPANY',   -- THE RESOURCE TO BE LOCKED
				                         @LOCKMODE    = 'EXCLUSIVE',					  -- TYPE OF LOCK
				                         @LOCKOWNER   = 'TRANSACTION',					  -- TRANSACTION OR SESSION
				                         @LOCKTIMEOUT = -1								  -- 15000, TIMEOUT IN MILLISECONDS, 15 SECONDS
				SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' SP_GETAPPLOCK RETURNED ' + CONVERT(VARCHAR(30), @RC) + ' -- '
				           + CASE WHEN @RC < 0 THEN 'COULD NOT OBTAIN THE LOCK'  ELSE 'LOCK OBTAINED'  END+
						   +', SESSION_ID: ['+ISNULL(CAST(@@SPID AS VARCHAR(20)),'')+']'+
						   +', PROC_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
				SET @ESITO = (SELECT DISTINCT CAST(RETURN_CODE AS VARCHAR(5))+' - '+STATUS_RC FROM @RC_TB WHERE RETURN_CODE = @RC)
				RAISERROR (@MSG,0,1) WITH NOWAIT    
				/*------------------------------------------------------------------------------------------------------------------------*/ 
				IF @RC >= 0 
				BEGIN
					DECLARE @DT            AS DATETIME2 = CAST(GETDATE() AS DATETIME2)
					DECLARE @WAIT_DURATION AS VARCHAR(30) 
					SET @WAIT_DURATION = CASE WHEN @RC = 0 THEN '00:00:00'
					                          WHEN @RC = 1 THEN '00:00:01' -- DEFAULT ONE SECOND
										 END 
					SET @DT = CASE WHEN @RC = 0 THEN DATEADD(SECOND,0,@DT)
					               WHEN @RC = 1 THEN DATEADD(SECOND,1,@DT)
							  END
					DECLARE @LOCK AS VARCHAR(200) = 'LOCK: '+ISNULL(LOWER(@ESITO),'')+' - START: ['+CONVERT(VARCHAR(50),@DT,121)+']'
					SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' GOT LOCK STARTING CRITICAL WORK - WAIT_DURATION: '+@WAIT_DURATION
					RAISERROR (@MSG,0,1) WITH NOWAIT
					BEGIN TRAN
						IF @@TRANCOUNT > 0
						BEGIN
							WAITFOR DELAY @WAIT_DURATION -- CRITICAL WORK SIMULATED BY WAITING
							EXEC [dbo].[SP_ANAG_EMPLOYEE_COMPANY] 
							            @TipoAzione
									   ,@Employee_Company_ID
							           ,@Employee_Company_Name                 
                                       ,@Employee_Company_Location          
                                       ,@Employee_Company_Address          
                                       ,@Employee_Company_Country             
                                       ,@Employee_Company_Holidays         
                                       ,@Nota_tb
							           ,@LogRuolo
							           ,@LogUser
							           ,@LogSession
							           ,@MessaggioExit OUTPUT
									   ,@Lock
							SET @MessaggioExit += CASE WHEN @RC = 1 
							                           THEN ' ; { Lock PR_ANAG_EMPLOYEE_COMPANY Session ['+
													        +ISNULL(CAST(@@SPID AS VARCHAR(20)),'')+']: '+LOWER(@ESITO)+
							                                +' - Avvio Delay: '+CONVERT(VARCHAR(50),@DT,121)+' }' 
													   /*WHEN @RC = 0
													   THEN ' ; { Avvio: '+CONVERT(VARCHAR(50),@DT,121)+' }'*/
													   ELSE ''
												  END
							COMMIT TRAN
						END
					COMMIT TRAN -- WILL RELEASE THE LOCK
					SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' WORK COMPLETE RELEASED LOCK'+': PR_ANAG_EMPLOYEE_COMPANY' 
					RAISERROR (@MSG,0,1) WITH NOWAIT
				END 
				ELSE 
				BEGIN    
					ROLLBACK TRAN
					SET @RC = 50000
					SELECT @MessaggioExit = '3; Errore: GetAppLock: '+LOWER(@ESITO)
				END
			END
	END TRY
	BEGIN CATCH
				SET @MSG = 'ERROR: ' + ERROR_MESSAGE() + ' AT ' 
				           + COALESCE(ERROR_PROCEDURE(), '')
				           + COALESCE (' LINE:' + CONVERT(VARCHAR(30), ERROR_LINE()), '')           
				RAISERROR (@MSG,0,1) WITH NOWAIT -- ENSURE THE MESSAGE GETS OUT                                 
				IF @@TRANCOUNT > 1 
				BEGIN
					ROLLBACK TRAN
					RAISERROR (@MSG,16,1)
					SELECT @MessaggioExit = '3; Errore: Impossibile Eseguire dbo.PR_ANAG_EMPLOYEE_COMPANY a seguito di Errore in GetAppLock: '+@MSG
				END
	 END CATCH
RETURN @RC
END
GO
/* KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY */ 

/* ------ ESEMPI FUNZIONAMENTO ------ */

/*
 -------------- TASTO AGGIUNGI --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'I'
DECLARE @Employee_Company_ID int
DECLARE @Employee_Company_Name varchar(200) = 'Kirey Group'
DECLARE @Employee_Company_Location varchar(200) = 'Milano'
DECLARE @Employee_Company_Address varchar(200) = 'via Benigno Crespi 57'
DECLARE @Employee_Company_Country varchar(200) = 'Italia'
DECLARE @Employee_Company_Holidays varchar(200) = '12-07'
DECLARE @Nota_tb varchar(1000) = NULL  
DECLARE @LogRuolo varchar(20)   -- DA BACK-END 
DECLARE @LogUser varchar(30)    -- DA BACK-END 
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING 
EXECUTE @RC = [dbo].[PR_ANAG_EMPLOYEE_COMPANY] 
   @TipoAzione
  ,@Employee_Company_ID
  ,@Employee_Company_Name
  ,@Employee_Company_Location
  ,@Employee_Company_Address
  ,@Employee_Company_Country
  ,@Employee_Company_Holidays
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY                    -- visualizza tabella output
*/
GO
/*
 -------------- TASTO MODIFICA --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'U'
DECLARE @Employee_Company_ID int = '1'                                   -- RECORD ESISTENTE 
DECLARE @Employee_Company_Name varchar(200) = 'Kirey Group'              -- NEW VALUE 
DECLARE @Employee_Company_Location varchar(200) = 'Milano'               -- NEW VALUE 
DECLARE @Employee_Company_Address varchar(200) = 'via Benigno Crespi 57' -- NEW VALUE 
DECLARE @Employee_Company_Country varchar(200) = 'Italia'                -- NEW VALUE 
DECLARE @Employee_Company_Holidays varchar(200) = '12-07'                -- NEW VALUE 
DECLARE @Nota_tb varchar(1000) = NULL                                    -- NEW VALUE 
DECLARE @LogRuolo varchar(20)   -- DA BACK-END 
DECLARE @LogUser varchar(30)    -- DA BACK-END 
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING  
EXECUTE @RC = [dbo].[PR_ANAG_EMPLOYEE_COMPANY] 
   @TipoAzione
  ,@Employee_Company_ID
  ,@Employee_Company_Name
  ,@Employee_Company_Location
  ,@Employee_Company_Address
  ,@Employee_Company_Country
  ,@Employee_Company_Holidays
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY                    -- visualizza tabella output
*/
GO
/*
 -------------- TASTO CANCELLA --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'D'
DECLARE @Employee_Company_ID int = '1' -- RECORD ESISTENTE 
DECLARE @Employee_Company_Name varchar(200) 
DECLARE @Employee_Company_Location varchar(200) 
DECLARE @Employee_Company_Address varchar(200) 
DECLARE @Employee_Company_Country varchar(200) 
DECLARE @Employee_Company_Holidays varchar(200) 
DECLARE @Nota_tb varchar(1000) 
DECLARE @LogRuolo varchar(20)   -- DA BACK-END 
DECLARE @LogUser varchar(30)    -- DA BACK-END 
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING 
EXECUTE @RC = [dbo].[PR_ANAG_EMPLOYEE_COMPANY] 
   @TipoAzione
  ,@Employee_Company_ID
  ,@Employee_Company_Name
  ,@Employee_Company_Location
  ,@Employee_Company_Address
  ,@Employee_Company_Country
  ,@Employee_Company_Holidays
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.ANAG_EMPLOYEE_COMPANY                    -- visualizza tabella output
*/

USE [KG_GUEST]
GO
CREATE OR ALTER PROCEDURE [dbo].[SP_ANAG_GUEST]
(
 @TipoAzione				  VARCHAR(1)            , 
 @Guest_ID                    INTEGER               ,
 @Guest_First_Name            VARCHAR(200)          ,
 @Guest_Last_Name             VARCHAR(200)          ,
 @Guest_Code                  VARCHAR(100)          ,
 @Guest_Company_Name          VARCHAR(100)          ,
 @Guest_Fiscal_Code           VARCHAR(100)          ,
 @Guest_Phone_Number          VARCHAR(100)          ,
 @Guest_Email                 VARCHAR(100)          ,
 @Nota_tb                     VARCHAR(1000)         ,
 @LogRuolo					  VARCHAR(20)           ,
 @LogUser					  VARCHAR(30)           , 
 @LogSession				  VARCHAR(40)           ,
 @MessaggioExit				  VARCHAR(2000) OUTPUT  ,
 @Lock						  VARCHAR(200) 
)
AS
BEGIN

    SET NOCOUNT ON
	DECLARE @ERROR_MESSAGE   AS VARCHAR(8000) =  ERROR_MESSAGE(),
		    @ERROR_NUMBER    AS INTEGER       =  ERROR_NUMBER(),
		    @ERROR_SEVERITY  AS INTEGER       =  ERROR_SEVERITY(),
		    @ERROR_STATE     AS INTEGER       =  ERROR_STATE(),
			@ERROR_LINE      AS INTEGER       =  ERROR_LINE(),
			@ERROR_PROCEDURE AS VARCHAR(8000) =  ERROR_PROCEDURE()
	DECLARE @SPID			 AS INTEGER       =  @@SPID
	DECLARE @SP_NAME		 AS VARCHAR(100)  = 'SP: [SP_ANAG_GUEST], SP_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
	DECLARE @SUSER_SNAME     AS VARCHAR(100)  = 'SUSER_SNAME: ['+ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'')+']',
	        @SUSER_ID        AS VARCHAR(100)  = 'SUSER_ID: ['+ISNULL(CAST(SUSER_ID(SUSER_SNAME()) AS VARCHAR(50)),'')+']',
			@SERVER_NAME     AS VARCHAR(100)  = 'SERVER_NAME: ['+ISNULL(CAST(@@SERVERNAME AS VARCHAR(100)),'')+']',
			@DB_NAME         AS VARCHAR(200)  = 'DB_NAME: ['+ISNULL(CAST(DB_NAME() AS VARCHAR(50)),'')+']',
			@HOST_ID         AS VARCHAR(100)  = 'HOST_ID: ['+ISNULL(TRIM(' ' FROM CAST(HOST_ID() AS VARCHAR(50))),'')+']',
			@HOST_NAME       AS VARCHAR(200)  = 'HOST_NAME: ['+ISNULL(CAST(HOST_NAME() AS VARCHAR(50)),'')+']',
			@SESSION_ID      AS VARCHAR(100)  = 'SESSION_ID: ['+ISNULL(CAST(@SPID AS VARCHAR(50)),'')+']',
			@PROGRAM_NAME    AS VARCHAR(100)  = 'PROGRAM_NAME: ['+ISNULL(CAST(PROGRAM_NAME() AS VARCHAR(100)),'')+']',
			@HOST_PROCESS_ID AS VARCHAR(100)  = 'HOST_PROCESS_ID: ['+ISNULL(CAST((SELECT DISTINCT HOST_PROCESS_ID 
			                                                                      FROM SYS.DM_EXEC_SESSIONS 
																		          WHERE SESSION_ID=@SPID) AS VARCHAR(50)),'')+']', 
			@DB_PRINCIPAL_ID AS VARCHAR(200)  = 'DATABASE_PRINCIPAL_ID: ['+ISNULL(CAST(DATABASE_PRINCIPAL_ID(SUSER_SNAME()) AS VARCHAR(50)),'-')+']',
			@DB_ID			 AS VARCHAR(200)  = 'DB_ID: ['+ISNULL(CAST(DB_ID(DB_NAME()) AS VARCHAR(50)),'')+']',
			@SCHEMA_NAME     AS VARCHAR(100)  = 'SCHEMA_NAME: ['+ISNULL(CAST(SCHEMA_NAME() AS VARCHAR(50)),'')+']',
			@SCHEMA_ID       AS VARCHAR(100)  = 'SCHEMA_ID: ['+ISNULL(CAST(SCHEMA_ID(SCHEMA_NAME()) AS VARCHAR(50)),'')+']',
			@ROLES_USER      AS VARCHAR(200)  = ( 
												 SELECT 'ROLES_USER_DB: ['+ISNULL(STRING_AGG(ROLE_PRINCIPAL_NAME,', ') 
												 	                              WITHIN GROUP (ORDER BY ROLE_PRINCIPAL_NAME ASC),'-')+']' AS ROLE_DB
												 FROM (
												       SELECT R.NAME AS ROLE_PRINCIPAL_NAME,
												              M.NAME AS MEMBER_PRINCIPAL_NAME
												 	   FROM SYS.DATABASE_ROLE_MEMBERS AS RM 
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS R ON RM.ROLE_PRINCIPAL_ID = R.PRINCIPAL_ID
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS M ON RM.MEMBER_PRINCIPAL_ID = M.PRINCIPAL_ID
												 	   WHERE M.NAME = SUSER_SNAME() 
												      ) AS T
												)
	DECLARE @RUOLO AS VARCHAR(100)  = 'RUOLO: ['+ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL')+
	                                   +IIF(ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL')+
									   +IIF(ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'NULL')+']'
	DECLARE @NOTA  AS VARCHAR(4000) =  'SP_MAIN: [PR_ANAG_GUEST], SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.PR_ANAG_GUEST','P') AS VARCHAR(20)),'')+'], '+
	                                  +@SERVER_NAME+', '+@PROGRAM_NAME+', '+@HOST_ID+', '+@HOST_NAME+', '+@HOST_PROCESS_ID+', '+
	                                  +@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID+', '+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME
	DECLARE @LOG            AS VARCHAR(4000) = ''
	DECLARE @DESCRIZIONE_SP AS VARCHAR(4000) = ''
	SELECT  @GUEST_FIRST_NAME    = TRIM(@GUEST_FIRST_NAME),
	        @GUEST_LAST_NAME     = TRIM(@GUEST_LAST_NAME),
			@GUEST_CODE          = TRIM(@GUEST_CODE),
			@GUEST_COMPANY_NAME  = TRIM(@GUEST_COMPANY_NAME),
			@GUEST_FISCAL_CODE   = TRIM(@GUEST_FISCAL_CODE),
			@GUEST_PHONE_NUMBER  = TRIM(@GUEST_PHONE_NUMBER),
			@GUEST_EMAIL         = TRIM(@GUEST_EMAIL),
	        @NOTA_TB             = TRIM(@NOTA_TB)
	DECLARE @PARAMETRI		AS VARCHAR(1000) = 'PARAMETRI: '+
											   +'@TipoAzione AS VARCHAR(1) = '              +IIF(@TipoAzione IS NULL,'NULL',''''+@TipoAzione+'''')                  +', '+
											   +'@Guest_ID AS INTEGER = '                   +IIF(@Guest_ID IS NULL,'NULL',''''+CAST(@Guest_ID AS VARCHAR(20))+'''') +', '+
											   +'@Guest_First_Name AS VARCHAR(200) = '      +IIF(@Guest_First_Name IS NULL,'NULL',''''+@Guest_First_Name+'''')      +', '+
	                                           +'@Guest_Last_Name AS VARCHAR(200) = '       +IIF(@Guest_Last_Name IS NULL,'NULL',''''+@Guest_Last_Name+'''')        +', '+
											   +'@Guest_Code AS VARCHAR(100) = '            +IIF(@Guest_Code IS NULL,'NULL',''''+@Guest_Code+'''')                  +', '+
											   +'@Guest_Company_Name AS VARCHAR(100) = '    +IIF(@Guest_Company_Name IS NULL,'NULL',''''+@Guest_Company_Name+'''')  +', '+
											   +'@Guest_Fiscal_Code AS VARCHAR(100) = '     +IIF(@Guest_Fiscal_Code IS NULL,'NULL',''''+@Guest_Fiscal_Code+'''')    +', '+
											   +'@Guest_Phone_Number AS VARCHAR(100) = '    +IIF(@Guest_Phone_Number IS NULL,'NULL',''''+@Guest_Phone_Number+'''')  +', '+
											   +'@Guest_Email AS VARCHAR(100) = '           +IIF(@Guest_Email IS NULL,'NULL',''''+@Guest_Email+'''')                +', '+
											   +'@Nota AS VARCHAR(1000) = '                 +IIF(@Nota_tb IS NULL,'NULL',''''+@Nota_tb+'''')                        +', '+   
											   +'@LogRuolo AS VARCHAR(20) = '               +IIF(@LogRuolo IS NULL,'NULL',''''+@LogRuolo+'''')                      +', '+
											   +'@LogUser AS VARCHAR(30) = '                +IIF(@LogUser IS NULL,'NULL',''''+@LogUser+'''')                        +', '+
											   +'@LogSession AS VARCHAR(40) = '             +IIF(@LogSession IS NULL,'NULL',''''+@LogSession+'''')                  +', '+
											   +'@MessaggioExit AS VARCHAR(2000) OUTPUT = ' +IIF(@MessaggioExit IS NULL,'NULL',''''+@MessaggioExit+'''')
	DECLARE @TIMESTAMP      AS SMALLDATETIME = CAST(GETDATE() AS SMALLDATETIME)
	DECLARE @USERID		    AS VARCHAR(50)   = @SUSER_ID
	DECLARE @EVENTO			AS INTEGER		 = 0
	DECLARE @NR_LOG 		AS INTEGER		 = 0
	DECLARE @ESITO          AS INTEGER       = 1
	DECLARE @ID_ELAB        AS VARCHAR(50)          
	
	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - START */
	
	EXEC dbo.SP_LogEventiElabID @ESITO=@ESITO OUTPUT, @ID_ELAB=@ID_ELAB OUTPUT

	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - END   */


	BEGIN TRY
		/************************************************************************************************************************************************************/
	    
		/* FIXED INPUT START */

		IF @ESITO = -1
		BEGIN
		    SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_GUEST'
			RAISERROR('Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP',11,19)
		END
		
		IF @ESITO = -2
		BEGIN
			SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_GUEST'
			RAISERROR('Generato in Fase di Definizione ID_ELAB per dbo.LogEventi',11,19)
		END

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Avviata Correttamente ed in Esecuzione {'+REPLACE(@ID_ELAB,', ','}')+
				           +' - '+ISNULL(@Lock,'')+': KG_Guest.dbo.SP_ANAG_GUEST'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_START_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END	

		/* FIXED INPUT END */

		/************************************************************************************************************************************************************/
		/* START EXECUTE SCRIPTS */



	    IF @ESITO = 1 AND (@TipoAzione IS NULL OR @TipoAzione NOT IN ('I','U','D'))
	    BEGIN
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 1,
				  @LOG = 'Avviata Fase Elaborazione',
				  @MessaggioExit = 'Tipo Azione Richiamata diversa da Inserimento, Aggiornamento e Cancellazione, Seleziona Uno dei Seguenti Parametri (''I'',''U'',''D'')'
		   RAISERROR(@MessaggioExit,11,19)
	    END

	   
	   /* ------------------------------------------------------------------------------------------------------------------------------ */


	   IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_FISCAL_CODE = @Guest_Fiscal_Code
		      ) > 0
		BEGIN
			/* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 2,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Ospite'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Ospite Richiamato Gia Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
							    END+' Ospite'
		   RAISERROR(@MessaggioExit,11,19)
		END
		

		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_FISCAL_CODE = @Guest_Fiscal_Code
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 2,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Ospite'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   INSERT INTO KG_GUEST.DBO.ANAG_GUEST 
		              (GUEST_FIRST_NAME, GUEST_LAST_NAME, GUEST_CODE, GUEST_COMPANY_NAME, 
					   GUEST_FISCAL_CODE, GUEST_PHONE_NUMBER, GUEST_EMAIL, NOTA)
		   SELECT @Guest_First_Name     AS GUEST_FIRST_NAME,
		          @Guest_Last_Name      AS GUEST_LAST_NAME,
				  @Guest_Code           AS GUEST_CODE,
				  @Guest_Company_Name   AS GUEST_COMPANY_NAME,
				  @Guest_Fiscal_Code    AS GUEST_FISCAL_CODE,
				  @Guest_Phone_Number   AS GUEST_PHONE_NUMBER,
				  @Guest_Email          AS GUEST_EMAIL,
				  @Nota_tb              AS NOTA
		   /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Inserimento Ospite Completata Correttamente ; Righe Inserite: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 2,
			      @LOG = 'Completata Fase Inserimento Nuovo Ospite per dbo.ANAG_GUEST --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */



	    IF @ESITO = 1 AND @TipoAzione IN ('U','D')
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_ID = @Guest_ID 
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						                   WHEN 'D' THEN 'Cancellazione'              
						  END+' Ospite'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Ospite Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						                         WHEN 'D' THEN 'Cancellazione'  
							    END+' Ospite'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'U'
	      AND (
		       SELECT GUEST_ID 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_ID = @Guest_ID 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'           
						  END+' Ospite'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   UPDATE KG_GUEST.DBO.ANAG_GUEST
		   SET GUEST_FIRST_NAME    = @Guest_First_Name,
	           GUEST_LAST_NAME     = @Guest_Last_Name,
			   GUEST_CODE          = @Guest_Code,
			   GUEST_COMPANY_NAME  = @Guest_Company_Name,
			   GUEST_FISCAL_CODE   = @Guest_First_Name,
			   GUEST_PHONE_NUMBER  = @Guest_Phone_Number,
			   GUEST_EMAIL         = @Guest_Email,
			   NOTA                = @Nota_tb
		   WHERE GUEST_ID = @Guest_ID
		/* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Aggiornamento Ospite Completata Correttamente ; Righe Aggiornate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 3,
			      @LOG = 'Completata Fase Aggiornamento Ospite per dbo.ANAG_GUEST --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'D'
		   AND (
		        SELECT COUNT(*) 
		        FROM KG_GUEST.DBO.REGISTER 
				WHERE GUEST_ID = @Guest_ID
			   ) > 0
		BEGIN
			/* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 4, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'           
						  END+' Ospite'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Ospite Non Cancellato Perche Attivo ed Utilizzato in Registro Presenze, Check per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'  
							    END+' Ospite'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'D'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_ID = @Guest_ID 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 5, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'           
						  END+' Ospite'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   DELETE FROM KG_GUEST.DBO.ANAG_GUEST
		   WHERE GUEST_ID = @Guest_ID
		  /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Cancellazione Ospite Completata Correttamente ; Righe Cancellate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 6, @EVENTO = 3,
			      @LOG = 'Completata Fase Cancellazione Ospite per dbo.ANAG_GUEST --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END



		/* END EXECUTE SCRIPTS */
		/************************************************************************************************************************************************************/
		
		/* FIXED OUTPUT START */

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Conclusa ed Eseguita Correttamente {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_GUEST'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END
		

		IF @ESITO = 0 
		BEGIN
			SELECT @ESITO = -1, @LOG = 'SP Interrotta a seguito di Inserimento LOG Errore Precedente'
			RAISERROR('SP Conclusa con Errore in Fase di Inserimento LOG',11,19)
		END

		/* FIXED OUTPUT END   */

		/************************************************************************************************************************************************************/

		SET @ESITO = 1

	END TRY
	
	BEGIN CATCH 
	
			DECLARE @ERROR AS VARCHAR(4000) 
			SELECT  @ERROR_MESSAGE   = ERROR_MESSAGE(),
				    @ERROR_NUMBER    = ERROR_NUMBER(),
					@ERROR_SEVERITY  = ERROR_SEVERITY(),
					@ERROR_STATE     = ERROR_STATE(),
					@ERROR_LINE      = ERROR_LINE(),
					@ERROR_PROCEDURE = ERROR_PROCEDURE()
			SET @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME)
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SET @LOG = REPLACE(@LOG,'Avviata Fase','Fallita Fase')
				SET @ERROR = 'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				            +'], ESITO: [-1], EVENTO_LOG_ERRORE: {'																+'  ' +
							+'ERROR_NUMBER: ['   +ISNULL(CAST(@ERROR_NUMBER   AS VARCHAR(20)),'')+']'							+', ' +
							+'ERROR_SEVERITY: [' +ISNULL(CAST(@ERROR_SEVERITY AS VARCHAR(20)),'')+']'							+', ' +  
							+'ERROR_LINE: ['     +ISNULL(CAST(@ERROR_LINE     AS VARCHAR(20)),'')+']'							+', ' +      
							+'ERROR_STATE: ['    +ISNULL(CAST(@ERROR_STATE    AS VARCHAR(20)),'')+']'							+', ' +     
							+'ERROR_MESSAGE: ['  +'3; Errore: '+ISNULL(@ERROR_MESSAGE,'')+']'									+', ' + 
							+'ERROR_PROCEDURE: ['+ISNULL(@ERROR_PROCEDURE,'')+'] } '		                                    +', ' +
							+'SP_MAIN: [PR_ANAG_GUEST], '+
							+'SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.PR_ANAG_GUEST','P') AS VARCHAR(20)),'')  +'], '+
							+@SERVER_NAME+', '+@PROGRAM_NAME+', '+@SESSION_ID												    +', ' +
							+@HOST_ID+', ' +@HOST_NAME+', '+@HOST_PROCESS_ID+', '+@SUSER_ID+', '+@SUSER_SNAME				    +', ' +
							+@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID													    +', ' +
							+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME	
				SET @MessaggioExit = '3; Errore '+
				                         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento' 
						                                   WHEN 'U' THEN 'Aggiornamento' 
										                   WHEN 'D' THEN 'Cancellazione' 
														   ELSE 'Generico' END+': '+@ERROR_MESSAGE
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				                     +'], ESITO: [-1]'+
				                     +CASE @ERROR_MESSAGE WHEN 'Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP'
									                      THEN ', EVENTO_LOG_START_'
														  WHEN 'Generato in Fase di Definizione ID_ELAB per dbo.LogEventi'
														  THEN ', EVENTO_LOG_START_'
														  ELSE ', EVENTO_LOG_' END
									 +CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+' --> '+@MessaggioExit+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@ERROR, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
				       @LOG = 'SP Conclusa con Errori {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_ANAG_GUEST'
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [-1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
		END CATCH

END
GO
USE [KG_GUEST]
GO
CREATE OR ALTER PROCEDURE [dbo].[PR_ANAG_GUEST]
 ( 
    @TipoAzione				     VARCHAR(1)            , 
    @Guest_ID                    INTEGER               ,
    @Guest_First_Name            VARCHAR(200)          ,
    @Guest_Last_Name             VARCHAR(200)          ,
    @Guest_Code                  VARCHAR(100)          ,
    @Guest_Company_Name          VARCHAR(100)          ,
    @Guest_Fiscal_Code           VARCHAR(100)          ,
    @Guest_Phone_Number          VARCHAR(100)          ,
    @Guest_Email                 VARCHAR(100)          ,
    @Nota_tb                     VARCHAR(1000)         ,
	@LogRuolo                    VARCHAR(20)           ,
	@LogUser                     VARCHAR(30)           ,
	@LogSession                  VARCHAR(40)           ,
	@MessaggioExit               VARCHAR(2000) OUTPUT
 )
/* PERFORMS A TASK IN A CRITICAL SECTION OF CODE THAT CAN ONLY BE RUN
   BY ONE SESSION AT A TIME. THE TASK IS SIMULATED BY A WAIT  */
AS
BEGIN
	DECLARE @ESITO AS VARCHAR(100)
	DECLARE @RC_TB AS TABLE 
	(
	 RETURN_CODE INTEGER      NULL,
	 STATUS_RC   VARCHAR(100) NULL
	)
	INSERT INTO @RC_TB (RETURN_CODE, STATUS_RC)
	SELECT 0    AS RC, 'BLOCCO CONCESSO IN MODO SINCRONO'                             AS STATUS_RC
	UNION ALL
	SELECT 1    AS RC, 'BLOCCO CONCESSO DOPO RILASCIO DI ALTRI BLOCCHI INCOMPATIBILI' AS STATUS_RC
	UNION ALL
	SELECT -1   AS RC, 'RICHIESTA DI BLOCCO SCADUTA'                                  AS STATUS_RC
	UNION ALL
	SELECT -2   AS RC, 'RICHIESTA DI BLOCCO ANNULLATA'                                AS STATUS_RC
	UNION ALL
	SELECT -3   AS RC, 'RICHIESTA DI BLOCCO RISULTA VITTIMA DI DEADLOCK'              AS STATUS_RC
	UNION ALL
	SELECT -999 AS RC, 'ERRORE DI CONVALIDA DI UN PARAMETRO O ERRORE DI CHIAMATA'     AS STATUS_RC	
	/*-------------------------------------------------------------------------------------------------------------------------*/
	DECLARE @RC  AS INTEGER       = 0, -- RETURN CODE
	        @MSG AS VARCHAR(2000)
	SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' CRITICAL_SECTION_WORKER STARTING'+': PR_ANAG_GUEST'
	RAISERROR (@MSG,0,1) WITH NOWAIT 
	BEGIN TRY
		BEGIN TRAN
			IF @@TRANCOUNT > 0
			BEGIN
				SET @MSG = CONVERT(VARCHAR,GETDATE(),121) + ' REQUESTING LOCK'
				RAISERROR (@MSG,0,1) WITH NOWAIT
				EXEC @RC = SP_GETAPPLOCK @RESOURCE    = 'dbo.PR_ANAG_GUEST',              -- THE RESOURCE TO BE LOCKED
				                         @LOCKMODE    = 'EXCLUSIVE',					  -- TYPE OF LOCK
				                         @LOCKOWNER   = 'TRANSACTION',					  -- TRANSACTION OR SESSION
				                         @LOCKTIMEOUT = -1								  -- 15000, TIMEOUT IN MILLISECONDS, 15 SECONDS
				SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' SP_GETAPPLOCK RETURNED ' + CONVERT(VARCHAR(30), @RC) + ' -- '
				           + CASE WHEN @RC < 0 THEN 'COULD NOT OBTAIN THE LOCK'  ELSE 'LOCK OBTAINED'  END+
						   +', SESSION_ID: ['+ISNULL(CAST(@@SPID AS VARCHAR(20)),'')+']'+
						   +', PROC_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
				SET @ESITO = (SELECT DISTINCT CAST(RETURN_CODE AS VARCHAR(5))+' - '+STATUS_RC FROM @RC_TB WHERE RETURN_CODE = @RC)
				RAISERROR (@MSG,0,1) WITH NOWAIT    
				/*------------------------------------------------------------------------------------------------------------------------*/ 
				IF @RC >= 0 
				BEGIN
					DECLARE @DT            AS DATETIME2 = CAST(GETDATE() AS DATETIME2)
					DECLARE @WAIT_DURATION AS VARCHAR(30) 
					SET @WAIT_DURATION = CASE WHEN @RC = 0 THEN '00:00:00'
					                          WHEN @RC = 1 THEN '00:00:01' -- DEFAULT ONE SECOND
										 END 
					SET @DT = CASE WHEN @RC = 0 THEN DATEADD(SECOND,0,@DT)
					               WHEN @RC = 1 THEN DATEADD(SECOND,1,@DT)
							  END
					DECLARE @LOCK AS VARCHAR(200) = 'LOCK: '+ISNULL(LOWER(@ESITO),'')+' - START: ['+CONVERT(VARCHAR(50),@DT,121)+']'
					SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' GOT LOCK STARTING CRITICAL WORK - WAIT_DURATION: '+@WAIT_DURATION
					RAISERROR (@MSG,0,1) WITH NOWAIT
					BEGIN TRAN
						IF @@TRANCOUNT > 0
						BEGIN
							WAITFOR DELAY @WAIT_DURATION -- CRITICAL WORK SIMULATED BY WAITING
							EXEC [dbo].[SP_ANAG_GUEST] 
							            @TipoAzione
                                       ,@Guest_ID
                                       ,@Guest_First_Name
                                       ,@Guest_Last_Name
                                       ,@Guest_Code
                                       ,@Guest_Company_Name
                                       ,@Guest_Fiscal_Code
                                       ,@Guest_Phone_Number
                                       ,@Guest_Email
                                       ,@Nota_tb
                                       ,@LogRuolo
                                       ,@LogUser
                                       ,@LogSession
							           ,@MessaggioExit OUTPUT
									   ,@Lock
							SET @MessaggioExit += CASE WHEN @RC = 1 
							                           THEN ' ; { Lock PR_ANAG_GUEST Session ['+
													        +ISNULL(CAST(@@SPID AS VARCHAR(20)),'')+']: '+LOWER(@ESITO)+
							                                +' - Avvio Delay: '+CONVERT(VARCHAR(50),@DT,121)+' }' 
													   /*WHEN @RC = 0
													   THEN ' ; { Avvio: '+CONVERT(VARCHAR(50),@DT,121)+' }'*/
													   ELSE ''
												  END
							COMMIT TRAN
						END
					COMMIT TRAN -- WILL RELEASE THE LOCK
					SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' WORK COMPLETE RELEASED LOCK'+': PR_ANAG_GUEST' 
					RAISERROR (@MSG,0,1) WITH NOWAIT
				END 
				ELSE 
				BEGIN    
					ROLLBACK TRAN
					SET @RC = 50000
					SELECT @MessaggioExit = '3; Errore: GetAppLock: '+LOWER(@ESITO)
				END
			END
	END TRY
	BEGIN CATCH
				SET @MSG = 'ERROR: ' + ERROR_MESSAGE() + ' AT ' 
				           + COALESCE(ERROR_PROCEDURE(), '')
				           + COALESCE (' LINE:' + CONVERT(VARCHAR(30), ERROR_LINE()), '')           
				RAISERROR (@MSG,0,1) WITH NOWAIT -- ENSURE THE MESSAGE GETS OUT                                 
				IF @@TRANCOUNT > 1 
				BEGIN
					ROLLBACK TRAN
					RAISERROR (@MSG,16,1)
					SELECT @MessaggioExit = '3; Errore: Impossibile Eseguire dbo.PR_ANAG_GUEST a seguito di Errore in GetAppLock: '+@MSG
				END
	 END CATCH
RETURN @RC
END
GO

/* KG_GUEST.DBO.ANAG_GUEST */ 

/* ------ ESEMPI FUNZIONAMENTO ------ */
/* 
 -------------- TASTO AGGIUNGI --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'I'
DECLARE @Guest_ID int
DECLARE @Guest_First_Name varchar(200) = 'Mario'
DECLARE @Guest_Last_Name varchar(200) = 'Rossi'
DECLARE @Guest_Code varchar(100) 
DECLARE @Guest_Company_Name varchar(100) = 'Test SpA'
DECLARE @Guest_Fiscal_Code varchar(100) = 'XXXXXX00X00X000X'
DECLARE @Guest_Phone_Number varchar(100) = '+39 0000000000'
DECLARE @Guest_Email varchar(100) = 'mario.rossi@test.it'
DECLARE @Nota_tb varchar(1000) 
DECLARE @LogRuolo varchar(20)   -- DA BACK-END
DECLARE @LogUser varchar(30)    -- DA BACK-END
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[PR_ANAG_GUEST] 
   @TipoAzione
  ,@Guest_ID
  ,@Guest_First_Name
  ,@Guest_Last_Name
  ,@Guest_Code
  ,@Guest_Company_Name
  ,@Guest_Fiscal_Code
  ,@Guest_Phone_Number
  ,@Guest_Email
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.ANAG_GUEST                               -- visualizza tabella output
*/
GO
/*
 -------------- TASTO MODIFICA --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'U'
DECLARE @Guest_ID int = '1'                                  -- RECORD ESISTENTE
DECLARE @Guest_First_Name varchar(200) = 'Mario'             -- NEW VALUE
DECLARE @Guest_Last_Name varchar(200) = 'Rossi'              -- NEW VALUE
DECLARE @Guest_Code varchar(100)                             -- NEW VALUE
DECLARE @Guest_Company_Name varchar(100) = 'Test SpA'        -- NEW VALUE
DECLARE @Guest_Fiscal_Code varchar(100) = 'XXXXXX00X00X000X' -- NEW VALUE
DECLARE @Guest_Phone_Number varchar(100) = '+39 1111111111'  -- NEW VALUE
DECLARE @Guest_Email varchar(100) = 'mario.rossi@test.it'    -- NEW VALUE
DECLARE @Nota_tb varchar(1000)                               -- NEW VALUE
DECLARE @LogRuolo varchar(20)   -- DA BACK-END
DECLARE @LogUser varchar(30)    -- DA BACK-END
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[PR_ANAG_GUEST] 
   @TipoAzione
  ,@Guest_ID
  ,@Guest_First_Name
  ,@Guest_Last_Name
  ,@Guest_Code
  ,@Guest_Company_Name
  ,@Guest_Fiscal_Code
  ,@Guest_Phone_Number
  ,@Guest_Email
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.ANAG_GUEST                               -- visualizza tabella output
*/
GO
/*
 -------------- TASTO CANCELLA --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'D'
DECLARE @Guest_ID int = '1'     -- RECORD ESISTENTE
DECLARE @Guest_First_Name varchar(200)   
DECLARE @Guest_Last_Name varchar(200) 
DECLARE @Guest_Code varchar(100)       
DECLARE @Guest_Company_Name varchar(100) 
DECLARE @Guest_Fiscal_Code varchar(100) 
DECLARE @Guest_Phone_Number varchar(100) 
DECLARE @Guest_Email varchar(100) 
DECLARE @Nota_tb varchar(1000)  
DECLARE @LogRuolo varchar(20)   -- DA BACK-END
DECLARE @LogUser varchar(30)    -- DA BACK-END
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[PR_ANAG_GUEST] 
   @TipoAzione
  ,@Guest_ID
  ,@Guest_First_Name
  ,@Guest_Last_Name
  ,@Guest_Code
  ,@Guest_Company_Name
  ,@Guest_Fiscal_Code
  ,@Guest_Phone_Number
  ,@Guest_Email
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.ANAG_GUEST                               -- visualizza tabella output
*/
GO

USE [KG_GUEST]
GO

/****** Object:  StoredProcedure [dbo].[SP_REGISTER]    Script Date: 09/10/2024 15:33:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE OR ALTER   PROCEDURE [dbo].[SP_REGISTER]
(
 @TipoAzione				  VARCHAR(1)            , 
 @Register_ID                 BIGINT                ,
 @Employee_Company_ID         INTEGER               ,
 @Guest_ID                    BIGINT                ,
 @Datetime_Work_Start         VARCHAR(100)          ,
 @Datetime_Work_End           VARCHAR(100)          ,
 @Nota_tb                     VARCHAR(1000)         ,
 @LogRuolo					  VARCHAR(20)           ,
 @LogUser					  VARCHAR(30)           , 
 @LogSession				  VARCHAR(40)           ,
 @MessaggioExit				  VARCHAR(2000) OUTPUT  ,
 @Lock						  VARCHAR(200) 
)
AS
BEGIN

    SET NOCOUNT ON
	DECLARE @ERROR_MESSAGE   AS VARCHAR(8000) =  ERROR_MESSAGE(),
		    @ERROR_NUMBER    AS INTEGER       =  ERROR_NUMBER(),
		    @ERROR_SEVERITY  AS INTEGER       =  ERROR_SEVERITY(),
		    @ERROR_STATE     AS INTEGER       =  ERROR_STATE(),
			@ERROR_LINE      AS INTEGER       =  ERROR_LINE(),
			@ERROR_PROCEDURE AS VARCHAR(8000) =  ERROR_PROCEDURE()
	DECLARE @SPID			 AS INTEGER       =  @@SPID
	DECLARE @SP_NAME		 AS VARCHAR(100)  = 'SP: [SP_REGISTER], SP_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
	DECLARE @SUSER_SNAME     AS VARCHAR(100)  = 'SUSER_SNAME: ['+ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'')+']',
	        @SUSER_ID        AS VARCHAR(100)  = 'SUSER_ID: ['+ISNULL(CAST(SUSER_ID(SUSER_SNAME()) AS VARCHAR(50)),'')+']',
			@SERVER_NAME     AS VARCHAR(100)  = 'SERVER_NAME: ['+ISNULL(CAST(@@SERVERNAME AS VARCHAR(100)),'')+']',
			@DB_NAME         AS VARCHAR(200)  = 'DB_NAME: ['+ISNULL(CAST(DB_NAME() AS VARCHAR(50)),'')+']',
			@HOST_ID         AS VARCHAR(100)  = 'HOST_ID: ['+ISNULL(TRIM(' ' FROM CAST(HOST_ID() AS VARCHAR(50))),'')+']',
			@HOST_NAME       AS VARCHAR(200)  = 'HOST_NAME: ['+ISNULL(CAST(HOST_NAME() AS VARCHAR(50)),'')+']',
			@SESSION_ID      AS VARCHAR(100)  = 'SESSION_ID: ['+ISNULL(CAST(@SPID AS VARCHAR(50)),'')+']',
			@PROGRAM_NAME    AS VARCHAR(100)  = 'PROGRAM_NAME: ['+ISNULL(CAST(PROGRAM_NAME() AS VARCHAR(100)),'')+']',
			@HOST_PROCESS_ID AS VARCHAR(100)  = 'HOST_PROCESS_ID: ['+ISNULL(CAST((SELECT DISTINCT HOST_PROCESS_ID 
			                                                                      FROM SYS.DM_EXEC_SESSIONS 
																		          WHERE SESSION_ID=@SPID) AS VARCHAR(50)),'')+']', 
			@DB_PRINCIPAL_ID AS VARCHAR(200)  = 'DATABASE_PRINCIPAL_ID: ['+ISNULL(CAST(DATABASE_PRINCIPAL_ID(SUSER_SNAME()) AS VARCHAR(50)),'-')+']',
			@DB_ID			 AS VARCHAR(200)  = 'DB_ID: ['+ISNULL(CAST(DB_ID(DB_NAME()) AS VARCHAR(50)),'')+']',
			@SCHEMA_NAME     AS VARCHAR(100)  = 'SCHEMA_NAME: ['+ISNULL(CAST(SCHEMA_NAME() AS VARCHAR(50)),'')+']',
			@SCHEMA_ID       AS VARCHAR(100)  = 'SCHEMA_ID: ['+ISNULL(CAST(SCHEMA_ID(SCHEMA_NAME()) AS VARCHAR(50)),'')+']',
			@ROLES_USER      AS VARCHAR(200)  = ( 
												 SELECT 'ROLES_USER_DB: ['+ISNULL(STRING_AGG(ROLE_PRINCIPAL_NAME,', ') 
												 	                              WITHIN GROUP (ORDER BY ROLE_PRINCIPAL_NAME ASC),'-')+']' AS ROLE_DB
												 FROM (
												       SELECT R.NAME AS ROLE_PRINCIPAL_NAME,
												              M.NAME AS MEMBER_PRINCIPAL_NAME
												 	   FROM SYS.DATABASE_ROLE_MEMBERS AS RM 
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS R ON RM.ROLE_PRINCIPAL_ID = R.PRINCIPAL_ID
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS M ON RM.MEMBER_PRINCIPAL_ID = M.PRINCIPAL_ID
												 	   WHERE M.NAME = SUSER_SNAME() 
												      ) AS T
												)
	DECLARE @RUOLO AS VARCHAR(100)  = 'RUOLO: ['+ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL')+
	                                   +IIF(ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL')+
									   +IIF(ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'NULL')+']'
	DECLARE @NOTA  AS VARCHAR(4000) =  'SP_MAIN: [PR_REGISTER], SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.PR_REGISTER','P') AS VARCHAR(20)),'')+'], '+
	                                  +@SERVER_NAME+', '+@PROGRAM_NAME+', '+@HOST_ID+', '+@HOST_NAME+', '+@HOST_PROCESS_ID+', '+
	                                  +@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID+', '+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME
	DECLARE @LOG            AS VARCHAR(4000) = ''
	DECLARE @DESCRIZIONE_SP AS VARCHAR(4000) = ''
	SELECT  @DATETIME_WORK_START = TRIM(@Datetime_Work_Start),
	        @DATETIME_WORK_END   = TRIM(@Datetime_Work_End),
	        @NOTA_TB             = TRIM(@NOTA_TB)
	DECLARE @CHECK_I_V		AS INTEGER = IIF(TRIM(@Datetime_Work_Start)='',0,1) 
	DECLARE @CHECK_F_V		AS INTEGER = IIF(TRIM(@Datetime_Work_End)='',0,1)
	DECLARE @PARAMETRI		AS VARCHAR(1000) = 'PARAMETRI: '+
											   +'@TipoAzione AS VARCHAR(1) = '              +IIF(@TipoAzione IS NULL,'NULL',''''+@TipoAzione+'''')                                                         +', '+
											   +'@Register_ID AS INTEGER = '                +IIF(@Register_ID IS NULL,'NULL',''''+CAST(@Register_ID AS VARCHAR(20))+'''')                                  +', '+
											   +'@Employee_Company_ID AS INTEGER = '        +IIF(@Employee_Company_ID IS NULL,'NULL',''''+CAST(@Employee_Company_ID AS VARCHAR(20))+'''')                  +', '+
											   +'@Guest_ID AS INTEGER = '                   +IIF(@Guest_ID IS NULL,'NULL',''''+CAST(@Guest_ID AS VARCHAR(20))+'''')                                        +', '+
											   +'@Datetime_Work_Start AS VARCHAR(100) = '	+CASE WHEN @Datetime_Work_Start IS NULL AND @CHECK_I_V<>0 THEN 'NULL'
											                                                      WHEN @Datetime_Work_Start IS NULL AND @CHECK_I_V=0  THEN ''''+'''' 
																							      WHEN TRIM(@Datetime_Work_Start) = ''                THEN ''''+'''' 
																							      ELSE ''''+ISNULL(FORMAT(TRY_CAST(@Datetime_Work_Start AS DATE),'yyyy-MM-dd'),@Datetime_Work_Start)+'''' 
																							 END                                                                                                           +', '+
											   +'@Datetime_Work_End AS VARCHAR(100) = '		+CASE WHEN @Datetime_Work_End IS NULL AND @CHECK_F_V<>0 THEN 'NULL'
											                                                      WHEN @Datetime_Work_End IS NULL AND @CHECK_F_V=0  THEN ''''+'''' 
																							  	  WHEN TRIM(@Datetime_Work_End) = ''                THEN ''''+'''' 
																							      ELSE ''''+ISNULL(FORMAT(TRY_CAST(@Datetime_Work_End AS DATE),'yyyy-MM-dd'),@Datetime_Work_End)+'''' 
																							 END                                                                                                           +', '+
											   +'@Nota AS VARCHAR(1000) = '                 +IIF(@Nota_tb IS NULL,'NULL',''''+@Nota_tb+'''')                                                               +', '+   
											   +'@LogRuolo AS VARCHAR(20) = '               +IIF(@LogRuolo IS NULL,'NULL',''''+@LogRuolo+'''')                                                             +', '+
											   +'@LogUser AS VARCHAR(30) = '                +IIF(@LogUser IS NULL,'NULL',''''+@LogUser+'''')                                                               +', '+
											   +'@LogSession AS VARCHAR(40) = '             +IIF(@LogSession IS NULL,'NULL',''''+@LogSession+'''')                                                         +', '+
											   +'@MessaggioExit AS VARCHAR(2000) OUTPUT = ' +IIF(@MessaggioExit IS NULL,'NULL',''''+@MessaggioExit+'''')
	DECLARE @TIMESTAMP      AS SMALLDATETIME = CAST(GETDATE() AS SMALLDATETIME)
	DECLARE @USERID		    AS VARCHAR(50)   = @SUSER_ID
	DECLARE @EVENTO			AS INTEGER		 = 0
	DECLARE @NR_LOG 		AS INTEGER		 = 0
	DECLARE @ESITO          AS INTEGER       = 1
	DECLARE @ID_ELAB        AS VARCHAR(50)          
	
	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - START */
	
	EXEC dbo.SP_LogEventiElabID @ESITO=@ESITO OUTPUT, @ID_ELAB=@ID_ELAB OUTPUT

	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - END   */


	BEGIN TRY
		/************************************************************************************************************************************************************/
	    
		/* FIXED INPUT START */

		IF @ESITO = -1
		BEGIN
		    SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_REGISTER'
			RAISERROR('Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP',11,19)
		END
		
		IF @ESITO = -2
		BEGIN
			SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_REGISTER'
			RAISERROR('Generato in Fase di Definizione ID_ELAB per dbo.LogEventi',11,19)
		END

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Avviata Correttamente ed in Esecuzione {'+REPLACE(@ID_ELAB,', ','}')+
				           +' - '+ISNULL(@Lock,'')+': KG_Guest.dbo.SP_REGISTER'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_START_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END	

		/* FIXED INPUT END */

		/************************************************************************************************************************************************************/
		/* START EXECUTE SCRIPTS */



	    IF @ESITO = 1 AND (@TipoAzione IS NULL OR @TipoAzione NOT IN ('I','U','D'))
	    BEGIN
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 1,
				  @LOG = 'Avviata Fase Elaborazione',
				  @MessaggioExit = 'Tipo Azione Richiamata diversa da Inserimento, Aggiornamento e Cancellazione, Seleziona Uno dei Seguenti Parametri (''I'',''U'',''D'')'
		   RAISERROR(@MessaggioExit,11,19)
	    END

	   
	   	   /* ------------------------------------------------------------------------------------------------------------------------------ */
	   
	   
	   IF @ESITO = 1 AND @TipoAzione IN ('I','U')
	      AND ( ISDATE(ISNULL(@Datetime_Work_Start,'1900-01-01'))=0  OR ISDATE(ISNULL(@Datetime_Work_End,'1900-01-01'))=0 )
	   BEGIN
	       /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 2,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
						                   WHEN 'U' THEN 'Aggiornamento' 
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Datetime_Work_Start e/o Datetime_Work_End Richiamati Non Valorizzati Correttamente per Esecuzione di Attivita di '+
								  +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										            WHEN 'U' THEN 'Aggiornamento' 
								   END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
	   END
	   

	   /* ------------------------------------------------------------------------------------------------------------------------------ */


	   IF @ESITO = 1 AND @TipoAzione IN ('I','U')
	      AND ISDATE(ISNULL(@Datetime_Work_Start,'1900-01-01'))>0  AND ISDATE(ISNULL(@Datetime_Work_End,'1900-01-01'))>0 
		  AND @Datetime_Work_Start > @Datetime_Work_End
	   BEGIN
	       /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 2,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
						                   WHEN 'U' THEN 'Aggiornamento' 
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Datetime_Work_Start Eccede Datetime_Work_End, Non Valorizzati Correttamente per Esecuzione di Attivita di '+
								  +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										            WHEN 'U' THEN 'Aggiornamento' 
							       END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
	   END
	   

	   /* ------------------------------------------------------------------------------------------------------------------------------ */


	   IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_ID = @Guest_ID
		      ) = 0
		BEGIN
			/* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Ospite Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
							    END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
		END
		

		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID
		      ) = 0
		BEGIN
			/* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Profilo Aziendale Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
							    END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'I'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_EMPLOYEE_COMPANY 
			   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID
		      ) > 0
		  AND (
		       SELECT COUNT(*) 
		       FROM dbo.ANAG_GUEST 
			   WHERE GUEST_ID = @Guest_ID
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 3,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento Nuovo' 
										   END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   INSERT INTO KG_GUEST.DBO.REGISTER 
		              (EMPLOYEE_COMPANY_ID, GUEST_ID, DATETIME_WORK_START, DATETIME_WORK_END, NOTA)
		   SELECT @Employee_Company_ID                    AS EMPLOYEE_COMPANY_ID,
		          @Guest_ID                               AS GUEST_ID,
				  ISNULL(@Datetime_Work_Start,GETDATE())  AS DATETIME_WORK_START,
				  @Datetime_Work_End                      AS DATETIME_WORK_END,
				  @Nota_tb                                AS NOTA
		   /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Inserimento Registro Presenze Completata Correttamente ; Righe Inserite: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 4, @EVENTO = 3,
			      @LOG = 'Completata Fase Inserimento Nuovo Ospite per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */



	    IF @ESITO = 1 AND @TipoAzione IN ('U','D')
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER
			   WHERE REGISTER_ID = @Register_ID 
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 4,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						                   WHEN 'D' THEN 'Cancellazione'              
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Registro Presenze Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						                         WHEN 'D' THEN 'Cancellazione'  
							    END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'U'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER
			   WHERE REGISTER_ID = @Register_ID 
		      ) > 0
		  AND ( 
		       SELECT COUNT(*)
			   FROM DBO.ANAG_EMPLOYEE_COMPANY
			   WHERE EMPLOYEE_COMPANY_ID = @Employee_Company_ID
		     ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 4,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'            
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Profilo Aziendale Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento' 
							    END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'U'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER
			   WHERE REGISTER_ID = @Register_ID 
		      ) > 0
		  AND ( 
		       SELECT COUNT(*)
			   FROM DBO.ANAG_GUEST
			   WHERE GUEST_ID = @Guest_ID
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 4,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   SET @MessaggioExit = 'Ospite Richiamato Non Esistente per Esecuzione di Attivita di '+
	 						   +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'
							    END+' Registro Presenze'
		   RAISERROR(@MessaggioExit,11,19)
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'U'
	      AND (
		       SELECT GUEST_ID 
		       FROM dbo.REGISTER 
			   WHERE REGISTER_ID = @Register_ID 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 4, @EVENTO = 4,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'U' THEN 'Aggiornamento'           
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   UPDATE KG_GUEST.DBO.REGISTER
		   SET EMPLOYEE_COMPANY_ID = @Employee_Company_ID,
		       GUEST_ID            = @Guest_ID,
			   DATETIME_WORK_START = @Datetime_Work_Start,
			   DATETIME_WORK_END   = @Datetime_Work_End,
			   NOTA                = @Nota_tb
		   WHERE REGISTER_ID = @Register_ID
		/* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Aggiornamento Registro Presenze Completata Correttamente ; Righe Aggiornate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 5, @EVENTO = 4,
			      @LOG = 'Completata Fase Aggiornamento Registro Presenze per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 AND @TipoAzione = 'D'
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE REGISTER_ID = @Register_ID 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 6, @EVENTO = 4,
			      @LOG = 'Avviata Fase '+
				         +CASE @TipoAzione WHEN 'D' THEN 'Cancellazione'           
						  END+' Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   DELETE FROM KG_GUEST.DBO.REGISTER
		   WHERE REGISTER_ID = @Register_ID
		  /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Cancellazione Registro Presenze Completata Correttamente ; Righe Cancellate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 7, @EVENTO = 4,
			      @LOG = 'Completata Fase Cancellazione Registro Presenze per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END



		/* END EXECUTE SCRIPTS */
		/************************************************************************************************************************************************************/
		
		/* FIXED OUTPUT START */

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Conclusa ed Eseguita Correttamente {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_REGISTER'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END
		

		IF @ESITO = 0 
		BEGIN
			SELECT @ESITO = -1, @LOG = 'SP Interrotta a seguito di Inserimento LOG Errore Precedente'
			RAISERROR('SP Conclusa con Errore in Fase di Inserimento LOG',11,19)
		END

		/* FIXED OUTPUT END   */

		/************************************************************************************************************************************************************/

		SET @ESITO = 1

	END TRY
	
	BEGIN CATCH 
	
			DECLARE @ERROR AS VARCHAR(4000) 
			SELECT  @ERROR_MESSAGE   = ERROR_MESSAGE(),
				    @ERROR_NUMBER    = ERROR_NUMBER(),
					@ERROR_SEVERITY  = ERROR_SEVERITY(),
					@ERROR_STATE     = ERROR_STATE(),
					@ERROR_LINE      = ERROR_LINE(),
					@ERROR_PROCEDURE = ERROR_PROCEDURE()
			SET @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME)
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SET @LOG = REPLACE(@LOG,'Avviata Fase','Fallita Fase')
				SET @ERROR = 'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				            +'], ESITO: [-1], EVENTO_LOG_ERRORE: {'																+'  ' +
							+'ERROR_NUMBER: ['   +ISNULL(CAST(@ERROR_NUMBER   AS VARCHAR(20)),'')+']'							+', ' +
							+'ERROR_SEVERITY: [' +ISNULL(CAST(@ERROR_SEVERITY AS VARCHAR(20)),'')+']'							+', ' +  
							+'ERROR_LINE: ['     +ISNULL(CAST(@ERROR_LINE     AS VARCHAR(20)),'')+']'							+', ' +      
							+'ERROR_STATE: ['    +ISNULL(CAST(@ERROR_STATE    AS VARCHAR(20)),'')+']'							+', ' +     
							+'ERROR_MESSAGE: ['  +'3; Errore: '+ISNULL(@ERROR_MESSAGE,'')+']'									+', ' + 
							+'ERROR_PROCEDURE: ['+ISNULL(@ERROR_PROCEDURE,'')+'] } '		                                    +', ' +
							+'SP_MAIN: [PR_REGISTER], '+
							+'SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.PR_REGISTER','P') AS VARCHAR(20)),'')  +'], '+
							+@SERVER_NAME+', '+@PROGRAM_NAME+', '+@SESSION_ID												    +', ' +
							+@HOST_ID+', ' +@HOST_NAME+', '+@HOST_PROCESS_ID+', '+@SUSER_ID+', '+@SUSER_SNAME				    +', ' +
							+@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID													    +', ' +
							+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME	
				SET @MessaggioExit = '3; Errore '+
				                         +CASE @TipoAzione WHEN 'I' THEN 'Inserimento' 
						                                   WHEN 'U' THEN 'Aggiornamento' 
										                   WHEN 'D' THEN 'Cancellazione' 
														   ELSE 'Generico' END+': '+@ERROR_MESSAGE
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				                     +'], ESITO: [-1]'+
				                     +CASE @ERROR_MESSAGE WHEN 'Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP'
									                      THEN ', EVENTO_LOG_START_'
														  WHEN 'Generato in Fase di Definizione ID_ELAB per dbo.LogEventi'
														  THEN ', EVENTO_LOG_START_'
														  ELSE ', EVENTO_LOG_' END
									 +CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+' --> '+@MessaggioExit+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@ERROR, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
				       @LOG = 'SP Conclusa con Errori {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_REGISTER'
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [-1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
		END CATCH

END
GO


USE [KG_GUEST]
GO
CREATE OR ALTER PROCEDURE [dbo].[PR_REGISTER]
 ( 
    @TipoAzione		   		     VARCHAR(1)            , 
    @Register_ID                 BIGINT                ,
    @Employee_Company_ID         INTEGER               ,
    @Guest_ID                    BIGINT                ,
    @Datetime_Work_Start         VARCHAR(100)          ,
    @Datetime_Work_End           VARCHAR(100)          ,
    @Nota_tb                     VARCHAR(1000)         ,
	@LogRuolo                    VARCHAR(20)           ,
	@LogUser                     VARCHAR(30)           ,
	@LogSession                  VARCHAR(40)           ,
	@MessaggioExit               VARCHAR(2000) OUTPUT
 )
/* PERFORMS A TASK IN A CRITICAL SECTION OF CODE THAT CAN ONLY BE RUN
   BY ONE SESSION AT A TIME. THE TASK IS SIMULATED BY A WAIT  */
AS
BEGIN
	DECLARE @ESITO AS VARCHAR(100)
	DECLARE @RC_TB AS TABLE 
	(
	 RETURN_CODE INTEGER      NULL,
	 STATUS_RC   VARCHAR(100) NULL
	)
	INSERT INTO @RC_TB (RETURN_CODE, STATUS_RC)
	SELECT 0    AS RC, 'BLOCCO CONCESSO IN MODO SINCRONO'                             AS STATUS_RC
	UNION ALL
	SELECT 1    AS RC, 'BLOCCO CONCESSO DOPO RILASCIO DI ALTRI BLOCCHI INCOMPATIBILI' AS STATUS_RC
	UNION ALL
	SELECT -1   AS RC, 'RICHIESTA DI BLOCCO SCADUTA'                                  AS STATUS_RC
	UNION ALL
	SELECT -2   AS RC, 'RICHIESTA DI BLOCCO ANNULLATA'                                AS STATUS_RC
	UNION ALL
	SELECT -3   AS RC, 'RICHIESTA DI BLOCCO RISULTA VITTIMA DI DEADLOCK'              AS STATUS_RC
	UNION ALL
	SELECT -999 AS RC, 'ERRORE DI CONVALIDA DI UN PARAMETRO O ERRORE DI CHIAMATA'     AS STATUS_RC	
	/*-------------------------------------------------------------------------------------------------------------------------*/
	DECLARE @RC  AS INTEGER       = 0, -- RETURN CODE
	        @MSG AS VARCHAR(2000)
	SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' CRITICAL_SECTION_WORKER STARTING'+': PR_REGISTER'
	RAISERROR (@MSG,0,1) WITH NOWAIT 
	BEGIN TRY
		BEGIN TRAN
			IF @@TRANCOUNT > 0
			BEGIN
				SET @MSG = CONVERT(VARCHAR,GETDATE(),121) + ' REQUESTING LOCK'
				RAISERROR (@MSG,0,1) WITH NOWAIT
				EXEC @RC = SP_GETAPPLOCK @RESOURCE    = 'dbo.PR_REGISTER',                -- THE RESOURCE TO BE LOCKED
				                         @LOCKMODE    = 'EXCLUSIVE',					  -- TYPE OF LOCK
				                         @LOCKOWNER   = 'TRANSACTION',					  -- TRANSACTION OR SESSION
				                         @LOCKTIMEOUT = -1								  -- 15000, TIMEOUT IN MILLISECONDS, 15 SECONDS
				SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' SP_GETAPPLOCK RETURNED ' + CONVERT(VARCHAR(30), @RC) + ' -- '
				           + CASE WHEN @RC < 0 THEN 'COULD NOT OBTAIN THE LOCK'  ELSE 'LOCK OBTAINED'  END+
						   +', SESSION_ID: ['+ISNULL(CAST(@@SPID AS VARCHAR(20)),'')+']'+
						   +', PROC_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
				SET @ESITO = (SELECT DISTINCT CAST(RETURN_CODE AS VARCHAR(5))+' - '+STATUS_RC FROM @RC_TB WHERE RETURN_CODE = @RC)
				RAISERROR (@MSG,0,1) WITH NOWAIT    
				/*------------------------------------------------------------------------------------------------------------------------*/ 
				IF @RC >= 0 
				BEGIN
					DECLARE @DT            AS DATETIME2 = CAST(GETDATE() AS DATETIME2)
					DECLARE @WAIT_DURATION AS VARCHAR(30) 
					SET @WAIT_DURATION = CASE WHEN @RC = 0 THEN '00:00:00'
					                          WHEN @RC = 1 THEN '00:00:01' -- DEFAULT ONE SECOND
										 END 
					SET @DT = CASE WHEN @RC = 0 THEN DATEADD(SECOND,0,@DT)
					               WHEN @RC = 1 THEN DATEADD(SECOND,1,@DT)
							  END
					DECLARE @LOCK AS VARCHAR(200) = 'LOCK: '+ISNULL(LOWER(@ESITO),'')+' - START: ['+CONVERT(VARCHAR(50),@DT,121)+']'
					SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' GOT LOCK STARTING CRITICAL WORK - WAIT_DURATION: '+@WAIT_DURATION
					RAISERROR (@MSG,0,1) WITH NOWAIT
					BEGIN TRAN
						IF @@TRANCOUNT > 0
						BEGIN
							WAITFOR DELAY @WAIT_DURATION -- CRITICAL WORK SIMULATED BY WAITING
							EXEC [dbo].[SP_REGISTER] 
							           @TipoAzione
                                      ,@Register_ID
                                      ,@Employee_Company_ID
                                      ,@Guest_ID
                                      ,@Datetime_Work_Start
                                      ,@Datetime_Work_End
                                      ,@Nota_tb
                                      ,@LogRuolo
                                      ,@LogUser
                                      ,@LogSession
                                      ,@MessaggioExit OUTPUT
                                      ,@Lock
							SET @MessaggioExit += CASE WHEN @RC = 1 
							                           THEN ' ; { Lock PR_REGISTER Session ['+
													        +ISNULL(CAST(@@SPID AS VARCHAR(20)),'')+']: '+LOWER(@ESITO)+
							                                +' - Avvio Delay: '+CONVERT(VARCHAR(50),@DT,121)+' }' 
													   /*WHEN @RC = 0
													   THEN ' ; { Avvio: '+CONVERT(VARCHAR(50),@DT,121)+' }'*/
													   ELSE ''
												  END
							COMMIT TRAN
						END
					COMMIT TRAN -- WILL RELEASE THE LOCK
					SET @MSG = CONVERT(VARCHAR(50),GETDATE(),121) + ' WORK COMPLETE RELEASED LOCK'+': PR_REGISTER' 
					RAISERROR (@MSG,0,1) WITH NOWAIT
				END 
				ELSE 
				BEGIN    
					ROLLBACK TRAN
					SET @RC = 50000
					SELECT @MessaggioExit = '3; Errore: GetAppLock: '+LOWER(@ESITO)
				END
			END
	END TRY
	BEGIN CATCH
				SET @MSG = 'ERROR: ' + ERROR_MESSAGE() + ' AT ' 
				           + COALESCE(ERROR_PROCEDURE(), '')
				           + COALESCE (' LINE:' + CONVERT(VARCHAR(30), ERROR_LINE()), '')           
				RAISERROR (@MSG,0,1) WITH NOWAIT -- ENSURE THE MESSAGE GETS OUT                                 
				IF @@TRANCOUNT > 1 
				BEGIN
					ROLLBACK TRAN
					RAISERROR (@MSG,16,1)
					SELECT @MessaggioExit = '3; Errore: Impossibile Eseguire dbo.PR_REGISTER a seguito di Errore in GetAppLock: '+@MSG
				END
	 END CATCH
RETURN @RC
END
GO
/* KG_GUEST.DBO.REGISTER */ 

/* ------ ESEMPI FUNZIONAMENTO ------ */
/*
 -------------- TASTO AGGIUNGI --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'I'
DECLARE @Register_ID bigint 
DECLARE @Employee_Company_ID int = '1'                -- RECORD ESISTENTE
DECLARE @Guest_ID bigint = '1'                        -- RECORD ESISTENTE
DECLARE @Datetime_Work_Start varchar(100) = GETDATE()
DECLARE @Datetime_Work_End varchar(100) 
DECLARE @Nota_tb varchar(1000) = 'Example'
DECLARE @LogRuolo varchar(20)   -- DA BACK-END
DECLARE @LogUser varchar(30)    -- DA BACK-END
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[PR_REGISTER] 
   @TipoAzione
  ,@Register_ID
  ,@Employee_Company_ID
  ,@Guest_ID
  ,@Datetime_Work_Start
  ,@Datetime_Work_End
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.REGISTER                                 -- visualizza tabella output
*/
GO
/*
 -------------- TASTO MODIFICA --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'U'
DECLARE @Register_ID bigint = '1'                                    -- RECORD ESISTENTE
DECLARE @Employee_Company_ID int = '1'                               -- NEW VALUE
DECLARE @Guest_ID bigint = '1'                                       -- NEW VALUE
DECLARE @Datetime_Work_Start varchar(100) = GETDATE()                -- NEW VALUE
DECLARE @Datetime_Work_End varchar(100) = DATEADD(HOUR,+1,GETDATE()) -- NEW VALUE
DECLARE @Nota_tb varchar(1000) = 'Example'
DECLARE @LogRuolo varchar(20)   -- DA BACK-END
DECLARE @LogUser varchar(30)    -- DA BACK-END
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[PR_REGISTER] 
   @TipoAzione
  ,@Register_ID
  ,@Employee_Company_ID
  ,@Guest_ID
  ,@Datetime_Work_Start
  ,@Datetime_Work_End
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.REGISTER                                 -- visualizza tabella output
*/
GO
/*
 -------------- TASTO CANCELLA --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @TipoAzione varchar(1) = 'D'
DECLARE @Register_ID bigint = '1'                                    -- RECORD ESISTENTE
DECLARE @Employee_Company_ID int  
DECLARE @Guest_ID bigint 
DECLARE @Datetime_Work_Start varchar(100) 
DECLARE @Datetime_Work_End varchar(100) 
DECLARE @Nota_tb varchar(1000) 
DECLARE @LogRuolo varchar(20)   -- DA BACK-END
DECLARE @LogUser varchar(30)    -- DA BACK-END
DECLARE @LogSession varchar(40) -- DA BACK-END
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[PR_REGISTER] 
   @TipoAzione
  ,@Register_ID
  ,@Employee_Company_ID
  ,@Guest_ID
  ,@Datetime_Work_Start
  ,@Datetime_Work_End
  ,@Nota_tb
  ,@LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.REGISTER                                 -- visualizza tabella output
*/
GO

USE [KG_GUEST]
GO
CREATE OR ALTER PROCEDURE [dbo].[SP_SCHED_CLOSE_REGISTER]
(
 @LogRuolo					  VARCHAR(20)           ,
 @LogUser					  VARCHAR(30)           , 
 @LogSession				  VARCHAR(40)           ,
 @MessaggioExit				  VARCHAR(2000) OUTPUT  
)
AS
BEGIN

    SET NOCOUNT ON
	DECLARE @ERROR_MESSAGE   AS VARCHAR(8000) =  ERROR_MESSAGE(),
		    @ERROR_NUMBER    AS INTEGER       =  ERROR_NUMBER(),
		    @ERROR_SEVERITY  AS INTEGER       =  ERROR_SEVERITY(),
		    @ERROR_STATE     AS INTEGER       =  ERROR_STATE(),
			@ERROR_LINE      AS INTEGER       =  ERROR_LINE(),
			@ERROR_PROCEDURE AS VARCHAR(8000) =  ERROR_PROCEDURE()
	DECLARE @SPID			 AS INTEGER       =  @@SPID
	DECLARE @SP_NAME		 AS VARCHAR(100)  = 'SP: [SP_SCHED_CLOSE_REGISTER], SP_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
	DECLARE @SUSER_SNAME     AS VARCHAR(100)  = 'SUSER_SNAME: ['+ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'')+']',
	        @SUSER_ID        AS VARCHAR(100)  = 'SUSER_ID: ['+ISNULL(CAST(SUSER_ID(SUSER_SNAME()) AS VARCHAR(50)),'')+']',
			@SERVER_NAME     AS VARCHAR(100)  = 'SERVER_NAME: ['+ISNULL(CAST(@@SERVERNAME AS VARCHAR(100)),'')+']',
			@DB_NAME         AS VARCHAR(200)  = 'DB_NAME: ['+ISNULL(CAST(DB_NAME() AS VARCHAR(50)),'')+']',
			@HOST_ID         AS VARCHAR(100)  = 'HOST_ID: ['+ISNULL(TRIM(' ' FROM CAST(HOST_ID() AS VARCHAR(50))),'')+']',
			@HOST_NAME       AS VARCHAR(200)  = 'HOST_NAME: ['+ISNULL(CAST(HOST_NAME() AS VARCHAR(50)),'')+']',
			@SESSION_ID      AS VARCHAR(100)  = 'SESSION_ID: ['+ISNULL(CAST(@SPID AS VARCHAR(50)),'')+']',
			@PROGRAM_NAME    AS VARCHAR(100)  = 'PROGRAM_NAME: ['+ISNULL(CAST(PROGRAM_NAME() AS VARCHAR(100)),'')+']',
			@HOST_PROCESS_ID AS VARCHAR(100)  = 'HOST_PROCESS_ID: ['+ISNULL(CAST((SELECT DISTINCT HOST_PROCESS_ID 
			                                                                      FROM SYS.DM_EXEC_SESSIONS 
																		          WHERE SESSION_ID=@SPID) AS VARCHAR(50)),'')+']', 
			@DB_PRINCIPAL_ID AS VARCHAR(200)  = 'DATABASE_PRINCIPAL_ID: ['+ISNULL(CAST(DATABASE_PRINCIPAL_ID(SUSER_SNAME()) AS VARCHAR(50)),'-')+']',
			@DB_ID			 AS VARCHAR(200)  = 'DB_ID: ['+ISNULL(CAST(DB_ID(DB_NAME()) AS VARCHAR(50)),'')+']',
			@SCHEMA_NAME     AS VARCHAR(100)  = 'SCHEMA_NAME: ['+ISNULL(CAST(SCHEMA_NAME() AS VARCHAR(50)),'')+']',
			@SCHEMA_ID       AS VARCHAR(100)  = 'SCHEMA_ID: ['+ISNULL(CAST(SCHEMA_ID(SCHEMA_NAME()) AS VARCHAR(50)),'')+']',
			@ROLES_USER      AS VARCHAR(200)  = ( 
												 SELECT 'ROLES_USER_DB: ['+ISNULL(STRING_AGG(ROLE_PRINCIPAL_NAME,', ') 
												 	                              WITHIN GROUP (ORDER BY ROLE_PRINCIPAL_NAME ASC),'-')+']' AS ROLE_DB
												 FROM (
												       SELECT R.NAME AS ROLE_PRINCIPAL_NAME,
												              M.NAME AS MEMBER_PRINCIPAL_NAME
												 	   FROM SYS.DATABASE_ROLE_MEMBERS AS RM 
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS R ON RM.ROLE_PRINCIPAL_ID = R.PRINCIPAL_ID
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS M ON RM.MEMBER_PRINCIPAL_ID = M.PRINCIPAL_ID
												 	   WHERE M.NAME = SUSER_SNAME() 
												      ) AS T
												)
	DECLARE @RUOLO AS VARCHAR(100)  = 'RUOLO: ['+ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL')+
	                                   +IIF(ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL')+
									   +IIF(ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'NULL')+']'
	DECLARE @NOTA  AS VARCHAR(4000) =  'SP_MAIN: [SP_SCHED_CLOSE_REGISTER], SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER','P') AS VARCHAR(20)),'')+'], '+
	                                  +@SERVER_NAME+', '+@PROGRAM_NAME+', '+@HOST_ID+', '+@HOST_NAME+', '+@HOST_PROCESS_ID+', '+
	                                  +@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID+', '+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME
	DECLARE @LOG            AS VARCHAR(4000) = ''
	DECLARE @DESCRIZIONE_SP AS VARCHAR(4000) = ''
	DECLARE @PARAMETRI		AS VARCHAR(1000) = 'PARAMETRI: '+					  
											   +'@LogRuolo AS VARCHAR(20) = '               +IIF(@LogRuolo IS NULL,'NULL',''''+@LogRuolo+'''')                      +', '+
											   +'@LogUser AS VARCHAR(30) = '                +IIF(@LogUser IS NULL,'NULL',''''+@LogUser+'''')                        +', '+
											   +'@LogSession AS VARCHAR(40) = '             +IIF(@LogSession IS NULL,'NULL',''''+@LogSession+'''')                  +', '+
											   +'@MessaggioExit AS VARCHAR(2000) OUTPUT = ' +IIF(@MessaggioExit IS NULL,'NULL',''''+@MessaggioExit+'''')
	DECLARE @TIMESTAMP      AS SMALLDATETIME = CAST(GETDATE() AS SMALLDATETIME)
	DECLARE @USERID		    AS VARCHAR(50)   = @SUSER_ID
	DECLARE @EVENTO			AS INTEGER		 = 0
	DECLARE @NR_LOG 		AS INTEGER		 = 0
	DECLARE @ESITO          AS INTEGER       = 1
	DECLARE @ID_ELAB        AS VARCHAR(50)          
	
	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - START */
	
	EXEC dbo.SP_LogEventiElabID @ESITO=@ESITO OUTPUT, @ID_ELAB=@ID_ELAB OUTPUT

	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - END   */


	BEGIN TRY
		/************************************************************************************************************************************************************/
	    
		/* FIXED INPUT START */

		IF @ESITO = -1
		BEGIN
		    SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER'
			RAISERROR('Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP',11,19)
		END
		
		IF @ESITO = -2
		BEGIN
			SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER'
			RAISERROR('Generato in Fase di Definizione ID_ELAB per dbo.LogEventi',11,19)
		END

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Avviata Correttamente ed in Esecuzione {'+REPLACE(@ID_ELAB,', ','}')+
				           +': KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_START_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END	

		/* FIXED INPUT END */

		/************************************************************************************************************************************************************/
		/* START EXECUTE SCRIPTS */



		IF @ESITO = 1 
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE CAST(DATETIME_WORK_START AS DATE) = CAST(GETDATE() AS DATE) 
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 1,
			      @LOG = 'Avviata Fase '+'Chiusura Schedulata Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   /* LOG START */
		   SET @MessaggioExit = '2; Warning: Operazione Non Completata: Assenza Dato Giornaliero ; Righe Aggiornate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 1,
			      @LOG = 'Non Completata Fase Aggiornamento Data per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */

		IF @ESITO = 1 
		  AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE CAST(DATETIME_WORK_START AS DATE) = CAST(GETDATE() AS DATE) 
		      ) > 0
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE CAST(DATETIME_WORK_START AS DATE) = CAST(GETDATE() AS DATE) 
			         AND (
					      DATETIME_WORK_END < DATETIME_WORK_START
					      OR
						  DATETIME_WORK_END IS NULL
						 )
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 1,
			      @LOG = 'Avviata Fase '+'Chiusura Schedulata Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   /* LOG START */
		   SET @MessaggioExit = '2; Warning: Operazione Non Completata: Dati Giornalieri Corretti ; Righe Aggiornate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 4, @EVENTO = 1,
			      @LOG = 'Non Completata Fase Aggiornamento Data per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */


		IF @ESITO = 1 
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE CAST(DATETIME_WORK_START AS DATE) = CAST(GETDATE() AS DATE) 
			         AND (
					      DATETIME_WORK_END < DATETIME_WORK_START
					      OR
						  DATETIME_WORK_END IS NULL
						 )
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 5, @EVENTO = 1,
			      @LOG = 'Avviata Fase '+'Chiusura Schedulata Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   UPDATE KG_GUEST.DBO.REGISTER
		   SET DATETIME_WORK_END = DATETIMEFROMPARTS(YEAR(GETDATE()),MONTH(GETDATE()),DAY(GETDATE()),'18','00','00','00')
		   WHERE CAST(DATETIME_WORK_START AS DATE) = CAST(GETDATE() AS DATE)
		   /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Correzione Dato Giornaliero Completata ; Righe Aggiornate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 6, @EVENTO = 1,
			      @LOG = 'Completata Fase Aggiornamento Data per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */



		/* END EXECUTE SCRIPTS */
		/************************************************************************************************************************************************************/
		
		/* FIXED OUTPUT START */

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Conclusa ed Eseguita Correttamente {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END
		

		IF @ESITO = 0 
		BEGIN
			SELECT @ESITO = -1, @LOG = 'SP Interrotta a seguito di Inserimento LOG Errore Precedente'
			RAISERROR('SP Conclusa con Errore in Fase di Inserimento LOG',11,19)
		END

		/* FIXED OUTPUT END   */

		/************************************************************************************************************************************************************/

		SET @ESITO = 1

	END TRY
	
	BEGIN CATCH 
	
			DECLARE @ERROR AS VARCHAR(4000) 
			SELECT  @ERROR_MESSAGE   = ERROR_MESSAGE(),
				    @ERROR_NUMBER    = ERROR_NUMBER(),
					@ERROR_SEVERITY  = ERROR_SEVERITY(),
					@ERROR_STATE     = ERROR_STATE(),
					@ERROR_LINE      = ERROR_LINE(),
					@ERROR_PROCEDURE = ERROR_PROCEDURE()
			SET @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME)
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SET @LOG = REPLACE(@LOG,'Avviata Fase','Fallita Fase')
				SET @ERROR = 'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				            +'], ESITO: [-1], EVENTO_LOG_ERRORE: {'																+'  ' +
							+'ERROR_NUMBER: ['   +ISNULL(CAST(@ERROR_NUMBER   AS VARCHAR(20)),'')+']'							+', ' +
							+'ERROR_SEVERITY: [' +ISNULL(CAST(@ERROR_SEVERITY AS VARCHAR(20)),'')+']'							+', ' +  
							+'ERROR_LINE: ['     +ISNULL(CAST(@ERROR_LINE     AS VARCHAR(20)),'')+']'							+', ' +      
							+'ERROR_STATE: ['    +ISNULL(CAST(@ERROR_STATE    AS VARCHAR(20)),'')+']'							+', ' +     
							+'ERROR_MESSAGE: ['  +'3; Errore: '+ISNULL(@ERROR_MESSAGE,'')+']'									+', ' + 
							+'ERROR_PROCEDURE: ['+ISNULL(@ERROR_PROCEDURE,'')+'] } '		                                    +', ' +
							+'SP_MAIN: [SP_SCHED_CLOSE_REGISTER], '+
							+'SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER','P') AS VARCHAR(20)),'')  +'], '+
							+@SERVER_NAME+', '+@PROGRAM_NAME+', '+@SESSION_ID												    +', ' +
							+@HOST_ID+', ' +@HOST_NAME+', '+@HOST_PROCESS_ID+', '+@SUSER_ID+', '+@SUSER_SNAME				    +', ' +
							+@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID													    +', ' +
							+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME	
				SET @MessaggioExit = '3; Errore '+
				                         +': '+@ERROR_MESSAGE
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				                     +'], ESITO: [-1]'+
				                     +CASE @ERROR_MESSAGE WHEN 'Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP'
									                      THEN ', EVENTO_LOG_START_'
														  WHEN 'Generato in Fase di Definizione ID_ELAB per dbo.LogEventi'
														  THEN ', EVENTO_LOG_START_'
														  ELSE ', EVENTO_LOG_' END
									 +CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+' --> '+@MessaggioExit+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@ERROR, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
				       @LOG = 'SP Conclusa con Errori {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_CLOSE_REGISTER'
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [-1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
		END CATCH

END
GO

/* KG_GUEST.DBO.REGISTER */ 

/* ------ ESEMPI FUNZIONAMENTO ------ */
/*
 -------------- SCHEDULAZIONE --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @LogRuolo varchar(20)
DECLARE @LogUser varchar(30)
DECLARE @LogSession varchar(40)
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[SP_SCHED_CLOSE_REGISTER] 
   @LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.REGISTER                                 -- visualizza tabella output
*/
GO

USE [KG_GUEST]
GO

CREATE OR ALTER PROCEDURE [dbo].[SP_SCHED_DELETE_RECORD_REGISTER]
(
 @LogRuolo					  VARCHAR(20)           ,
 @LogUser					  VARCHAR(30)           , 
 @LogSession				  VARCHAR(40)           ,
 @MessaggioExit				  VARCHAR(2000) OUTPUT  
)
AS
BEGIN

    SET NOCOUNT ON
	DECLARE @ERROR_MESSAGE   AS VARCHAR(8000) =  ERROR_MESSAGE(),
		    @ERROR_NUMBER    AS INTEGER       =  ERROR_NUMBER(),
		    @ERROR_SEVERITY  AS INTEGER       =  ERROR_SEVERITY(),
		    @ERROR_STATE     AS INTEGER       =  ERROR_STATE(),
			@ERROR_LINE      AS INTEGER       =  ERROR_LINE(),
			@ERROR_PROCEDURE AS VARCHAR(8000) =  ERROR_PROCEDURE()
	DECLARE @SPID			 AS INTEGER       =  @@SPID
	DECLARE @SP_NAME		 AS VARCHAR(100)  = 'SP: [SP_SCHED_DELETE_RECORD_REGISTER], SP_ID: ['+ISNULL(CAST(@@PROCID AS VARCHAR(20)),'')+']'
	DECLARE @SUSER_SNAME     AS VARCHAR(100)  = 'SUSER_SNAME: ['+ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'')+']',
	        @SUSER_ID        AS VARCHAR(100)  = 'SUSER_ID: ['+ISNULL(CAST(SUSER_ID(SUSER_SNAME()) AS VARCHAR(50)),'')+']',
			@SERVER_NAME     AS VARCHAR(100)  = 'SERVER_NAME: ['+ISNULL(CAST(@@SERVERNAME AS VARCHAR(100)),'')+']',
			@DB_NAME         AS VARCHAR(200)  = 'DB_NAME: ['+ISNULL(CAST(DB_NAME() AS VARCHAR(50)),'')+']',
			@HOST_ID         AS VARCHAR(100)  = 'HOST_ID: ['+ISNULL(TRIM(' ' FROM CAST(HOST_ID() AS VARCHAR(50))),'')+']',
			@HOST_NAME       AS VARCHAR(200)  = 'HOST_NAME: ['+ISNULL(CAST(HOST_NAME() AS VARCHAR(50)),'')+']',
			@SESSION_ID      AS VARCHAR(100)  = 'SESSION_ID: ['+ISNULL(CAST(@SPID AS VARCHAR(50)),'')+']',
			@PROGRAM_NAME    AS VARCHAR(100)  = 'PROGRAM_NAME: ['+ISNULL(CAST(PROGRAM_NAME() AS VARCHAR(100)),'')+']',
			@HOST_PROCESS_ID AS VARCHAR(100)  = 'HOST_PROCESS_ID: ['+ISNULL(CAST((SELECT DISTINCT HOST_PROCESS_ID 
			                                                                      FROM SYS.DM_EXEC_SESSIONS 
																		          WHERE SESSION_ID=@SPID) AS VARCHAR(50)),'')+']', 
			@DB_PRINCIPAL_ID AS VARCHAR(200)  = 'DATABASE_PRINCIPAL_ID: ['+ISNULL(CAST(DATABASE_PRINCIPAL_ID(SUSER_SNAME()) AS VARCHAR(50)),'-')+']',
			@DB_ID			 AS VARCHAR(200)  = 'DB_ID: ['+ISNULL(CAST(DB_ID(DB_NAME()) AS VARCHAR(50)),'')+']',
			@SCHEMA_NAME     AS VARCHAR(100)  = 'SCHEMA_NAME: ['+ISNULL(CAST(SCHEMA_NAME() AS VARCHAR(50)),'')+']',
			@SCHEMA_ID       AS VARCHAR(100)  = 'SCHEMA_ID: ['+ISNULL(CAST(SCHEMA_ID(SCHEMA_NAME()) AS VARCHAR(50)),'')+']',
			@ROLES_USER      AS VARCHAR(200)  = ( 
												 SELECT 'ROLES_USER_DB: ['+ISNULL(STRING_AGG(ROLE_PRINCIPAL_NAME,', ') 
												 	                              WITHIN GROUP (ORDER BY ROLE_PRINCIPAL_NAME ASC),'-')+']' AS ROLE_DB
												 FROM (
												       SELECT R.NAME AS ROLE_PRINCIPAL_NAME,
												              M.NAME AS MEMBER_PRINCIPAL_NAME
												 	   FROM SYS.DATABASE_ROLE_MEMBERS AS RM 
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS R ON RM.ROLE_PRINCIPAL_ID = R.PRINCIPAL_ID
												 	   INNER JOIN SYS.DATABASE_PRINCIPALS AS M ON RM.MEMBER_PRINCIPAL_ID = M.PRINCIPAL_ID
												 	   WHERE M.NAME = SUSER_SNAME() 
												      ) AS T
												)
	DECLARE @RUOLO AS VARCHAR(100)  = 'RUOLO: ['+ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL')+
	                                   +IIF(ISNULL(CAST(@LogRuolo AS VARCHAR(20)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL')+
									   +IIF(ISNULL(CAST(@LogUser AS VARCHAR(30)),'NULL') IN (''),'',' | ')+
									   +ISNULL(CAST(SUSER_SNAME() AS VARCHAR(50)),'NULL')+']'
	DECLARE @NOTA  AS VARCHAR(4000) =  'SP_MAIN: [SP_SCHED_DELETE_RECORD_REGISTER], SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER','P') AS VARCHAR(20)),'')+'], '+
	                                  +@SERVER_NAME+', '+@PROGRAM_NAME+', '+@HOST_ID+', '+@HOST_NAME+', '+@HOST_PROCESS_ID+', '+
	                                  +@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID+', '+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME
	DECLARE @LOG            AS VARCHAR(4000) = ''
	DECLARE @DESCRIZIONE_SP AS VARCHAR(4000) = ''
	DECLARE @PARAMETRI		AS VARCHAR(1000) = 'PARAMETRI: '+					  
											   +'@LogRuolo AS VARCHAR(20) = '               +IIF(@LogRuolo IS NULL,'NULL',''''+@LogRuolo+'''')                      +', '+
											   +'@LogUser AS VARCHAR(30) = '                +IIF(@LogUser IS NULL,'NULL',''''+@LogUser+'''')                        +', '+
											   +'@LogSession AS VARCHAR(40) = '             +IIF(@LogSession IS NULL,'NULL',''''+@LogSession+'''')                  +', '+
											   +'@MessaggioExit AS VARCHAR(2000) OUTPUT = ' +IIF(@MessaggioExit IS NULL,'NULL',''''+@MessaggioExit+'''')
	DECLARE @TIMESTAMP      AS SMALLDATETIME = CAST(GETDATE() AS SMALLDATETIME)
	DECLARE @USERID		    AS VARCHAR(50)   = @SUSER_ID
	DECLARE @EVENTO			AS INTEGER		 = 0
	DECLARE @NR_LOG 		AS INTEGER		 = 0
	DECLARE @ESITO          AS INTEGER       = 1
	DECLARE @ID_ELAB        AS VARCHAR(50)          
	
	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - START */
	
	EXEC dbo.SP_LogEventiElabID @ESITO=@ESITO OUTPUT, @ID_ELAB=@ID_ELAB OUTPUT

	/* DEFINIZIONE ID_ELAB PER dbo.LogEventi - END   */


	BEGIN TRY
		/************************************************************************************************************************************************************/
	    
		/* FIXED INPUT START */

		IF @ESITO = -1
		BEGIN
		    SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER'
			RAISERROR('Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP',11,19)
		END
		
		IF @ESITO = -2
		BEGIN
			SET @ID_ELAB = 'ID_ELAB: [-], '
			SELECT @NR_LOG = 0, @EVENTO = 0, @LOG = 'SP Non Avviata e Non Eseguita {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER'
			RAISERROR('Generato in Fase di Definizione ID_ELAB per dbo.LogEventi',11,19)
		END

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Avviata Correttamente ed in Esecuzione {'+REPLACE(@ID_ELAB,', ','}')+
				           +': KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_START_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END	

		/* FIXED INPUT END */

		/************************************************************************************************************************************************************/
		/* START EXECUTE SCRIPTS */

		 

		IF @ESITO = 1 
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE CAST(DATETIME_WORK_START AS DATE) < DATEADD(DAY,-20,CAST(GETDATE() AS DATE)) 
		      ) = 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 1, @EVENTO = 1,
			      @LOG = 'Avviata Fase '+'Eliminazione Record Schedulata Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   /* LOG START */
		   SET @MessaggioExit = '2; Warning: Operazione Non Completata: Assenza Dati Pre "'+CONVERT(VARCHAR(20),DATEADD(DAY,-20,CAST(GETDATE() AS DATE)),121)+'"'+
		                       +'; Righe Cancellate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 2, @EVENTO = 1,
			      @LOG = 'Non Completata Fase Cancellazione Data per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */
	

		IF @ESITO = 1 
	      AND (
		       SELECT COUNT(*) 
		       FROM dbo.REGISTER 
			   WHERE CAST(DATETIME_WORK_START AS DATE) < DATEADD(DAY,-20,CAST(GETDATE() AS DATE)) 
		      ) > 0
		BEGIN
		   /* LOG START */
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 3, @EVENTO = 1,
			      @LOG = 'Avviata Fase '+'Eliminazione Record Schedulata Registro Presenze'
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                 @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
								 @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		   DELETE FROM KG_GUEST.DBO.REGISTER
		   WHERE CAST(DATETIME_WORK_START AS DATE) < DATEADD(DAY,-20,CAST(GETDATE() AS DATE)) 
		   /* LOG START */
		   SET @MessaggioExit = '1; Successo: Operazione Eliminazione Dati Completata Pre "'+CONVERT(VARCHAR(20),DATEADD(DAY,-20,CAST(GETDATE() AS DATE)),121)+'"'+
		                       +'; Righe Cancellate: '+CAST(@@ROWCOUNT AS VARCHAR(10))
		   SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 4, @EVENTO = 1,
			      @LOG = 'Completata Fase Aggiornamento Data per dbo.REGISTER --> '+@MessaggioExit
		   SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
		   EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                     @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG,
							     @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
		   /* LOG END   */
		END


		/* ------------------------------------------------------------------------------------------------------------------------------ */



		/* END EXECUTE SCRIPTS */
		/************************************************************************************************************************************************************/
		
		/* FIXED OUTPUT START */

		IF @ESITO = 1
		BEGIN
		    /* LOG START */
			SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
			       @LOG = 'SP Conclusa ed Eseguita Correttamente {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER'
			SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
			EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
			                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
								  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
			/* LOG END   */
		END
		

		IF @ESITO = 0 
		BEGIN
			SELECT @ESITO = -1, @LOG = 'SP Interrotta a seguito di Inserimento LOG Errore Precedente'
			RAISERROR('SP Conclusa con Errore in Fase di Inserimento LOG',11,19)
		END

		/* FIXED OUTPUT END   */

		/************************************************************************************************************************************************************/

		SET @ESITO = 1

	END TRY
	
	BEGIN CATCH 
	
			DECLARE @ERROR AS VARCHAR(4000) 
			SELECT  @ERROR_MESSAGE   = ERROR_MESSAGE(),
				    @ERROR_NUMBER    = ERROR_NUMBER(),
					@ERROR_SEVERITY  = ERROR_SEVERITY(),
					@ERROR_STATE     = ERROR_STATE(),
					@ERROR_LINE      = ERROR_LINE(),
					@ERROR_PROCEDURE = ERROR_PROCEDURE()
			SET @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME)
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SET @LOG = REPLACE(@LOG,'Avviata Fase','Fallita Fase')
				SET @ERROR = 'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				            +'], ESITO: [-1], EVENTO_LOG_ERRORE: {'																+'  ' +
							+'ERROR_NUMBER: ['   +ISNULL(CAST(@ERROR_NUMBER   AS VARCHAR(20)),'')+']'							+', ' +
							+'ERROR_SEVERITY: [' +ISNULL(CAST(@ERROR_SEVERITY AS VARCHAR(20)),'')+']'							+', ' +  
							+'ERROR_LINE: ['     +ISNULL(CAST(@ERROR_LINE     AS VARCHAR(20)),'')+']'							+', ' +      
							+'ERROR_STATE: ['    +ISNULL(CAST(@ERROR_STATE    AS VARCHAR(20)),'')+']'							+', ' +     
							+'ERROR_MESSAGE: ['  +'3; Errore: '+ISNULL(@ERROR_MESSAGE,'')+']'									+', ' + 
							+'ERROR_PROCEDURE: ['+ISNULL(@ERROR_PROCEDURE,'')+'] } '		                                    +', ' +
							+'SP_MAIN: [SP_SCHED_DELETE_RECORD_REGISTER], '+
							+'SP_ID: ['+ISNULL(CAST(OBJECT_ID('KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER','P') AS VARCHAR(20)),'')  +'], '+
							+@SERVER_NAME+', '+@PROGRAM_NAME+', '+@SESSION_ID												    +', ' +
							+@HOST_ID+', ' +@HOST_NAME+', '+@HOST_PROCESS_ID+', '+@SUSER_ID+', '+@SUSER_SNAME				    +', ' +
							+@DB_PRINCIPAL_ID+', '+@ROLES_USER+', '+@DB_ID													    +', ' +
							+@DB_NAME+', '+@SCHEMA_ID+', '+@SCHEMA_NAME	
				SET @MessaggioExit = '3; Errore '+
				                         +': '+@ERROR_MESSAGE
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+ISNULL(CAST(@NR_LOG AS VARCHAR(5)),'')+
				                     +'], ESITO: [-1]'+
				                     +CASE @ERROR_MESSAGE WHEN 'Generato in Fase di Input Variabile {@ESITO = -1} in Avvio SP'
									                      THEN ', EVENTO_LOG_START_'
														  WHEN 'Generato in Fase di Definizione ID_ELAB per dbo.LogEventi'
														  THEN ', EVENTO_LOG_START_'
														  ELSE ', EVENTO_LOG_' END
									 +CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+' --> '+@MessaggioExit+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@ERROR, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
			IF @ESITO = -1
			BEGIN
				/* ERROR LOG START */
				SELECT @TIMESTAMP = CAST(GETDATE() AS SMALLDATETIME), @NR_LOG = 0, @EVENTO = 0,
				       @LOG = 'SP Conclusa con Errori {'+REPLACE(@ID_ELAB,', ','}')+': KG_Guest.dbo.SP_SCHED_DELETE_RECORD_REGISTER'
				SET @DESCRIZIONE_SP = @ID_ELAB+'NR_LOG: ['+CAST(@NR_LOG AS VARCHAR(10))+'], ESITO: [-1]'+', EVENTO_LOG_END_'+CAST(@EVENTO AS VARCHAR(10))+': ['+@LOG+']'
				EXEC dbo.SP_LogFlussi @DESCRIZIONE=@DESCRIZIONE_SP, @MAIN_PROCEDURE=@SP_NAME, @PARAMETRI=@PARAMETRI, @NOTA=@NOTA, @C_RUOLO=@RUOLO,
				                      @SESSIONID=@SESSION_ID, @USERID=@USERID, @TIMESTAMP=@TIMESTAMP, @ESITO=@ESITO OUTPUT, @NR_LOG=@NR_LOG, 
									  @LOG=@LOG, @EVENTO=@EVENTO, @ID_ELAB=@ID_ELAB
				/* ERROR LOG END   */
			END  
	
			SET @ESITO = -1
	
		END CATCH

END
GO

/* KG_GUEST.DBO.REGISTER */ 

/* ------ ESEMPI FUNZIONAMENTO ------ */
/*
 -------------- SCHEDULAZIONE --------------
USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @LogRuolo varchar(20)
DECLARE @LogUser varchar(30)
DECLARE @LogSession varchar(40)
DECLARE @MessaggioExit varchar(2000)
-- EXECUTING
EXECUTE @RC = [dbo].[SP_SCHED_DELETE_RECORD_REGISTER] 
   @LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
SELECT @MessaggioExit AS POP_UP
SELECT * FROM DBO.FN_LogView('','','',GETDATE()) ORDER BY 1 DESC    -- visualizza tabella log
SELECT * FROM KG_GUEST.DBO.REGISTER                                 -- visualizza tabella output
*/
GO

CREATE OR ALTER VIEW dbo.VW_REGISTER 
AS
SELECT R.REGISTER_ID                              AS REGISTER_ID,
       R.DATETIME_WORK_START                      AS DATA_INIZIO,
	   R.DATETIME_WORK_END                        AS DATA_FINE,
	   R.NOTA                                     AS NOTA_REGISTER,
	   E.EMPLOYEE_COMPANY_NAME                    AS COMPANY_NAME,
	   CONCAT_WS(' - ',
	             E.EMPLOYEE_COMPANY_COUNTRY,
	             E.EMPLOYEE_COMPANY_LOCATION,
	             E.EMPLOYEE_COMPANY_ADDRESS)      AS COMPANY_DESCR,
	   G.GUEST_CODE                               AS GUEST_CODE,
	   CONCAT_WS(' ',
	             G.GUEST_FIRST_NAME,
	             G.GUEST_LAST_NAME)               AS GUEST_NAME,
	   G.GUEST_FISCAL_CODE                        AS GUEST_FISCAL_CODE,
	   G.GUEST_EMAIL                              AS GUEST_EMAIL,
	   G.GUEST_PHONE_NUMBER                       AS GUEST_PHONE_NUMBER,
	   G.GUEST_COMPANY_NAME                       AS GUEST_COMPANY_NAME
FROM dbo.REGISTER AS R
LEFT OUTER JOIN dbo.ANAG_EMPLOYEE_COMPANY AS E ON R.EMPLOYEE_COMPANY_ID = E.EMPLOYEE_COMPANY_ID
LEFT OUTER JOIN dbo.ANAG_GUEST AS G ON R.GUEST_ID = G.GUEST_ID
GO
--SELECT * FROM dbo.VW_REGISTER

/* CREATE SQL SERVER AGENT JOB & ALERT FOR DBO.SP_SCHED_CLOSE_REGISTER */
USE [msdb]
GO
DECLARE @JOB_ID AS NVARCHAR(4000) = (SELECT JOB_ID FROM MSDB.DBO.SYSJOBS WHERE NAME = 'Sched_Close_Register')
IF @JOB_ID IS NOT NULL
BEGIN
	EXEC msdb.dbo.sp_delete_job @job_id=@JOB_ID, @delete_unused_schedule=1
END
GO
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
	EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
END
;
DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'Sched_Close_Register', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'TSK_KG', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'EXEC SP', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=
N'USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @LogRuolo varchar(20)
DECLARE @LogUser varchar(30)
DECLARE @LogSession varchar(40)
DECLARE @MessaggioExit varchar(2000)

EXECUTE @RC = [dbo].[SP_SCHED_CLOSE_REGISTER] 
   @LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
GO
', 
		@database_name=N'KG_GUEST', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'Scheduling', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20241007, 
		@active_end_date=99991231, 
		@active_start_time=190000, 
		@active_end_time=235959, 
		@schedule_uid=N'51cb87d7-5fbc-4358-be6a-199ba4181956'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO

USE [msdb]
GO
DECLARE @ALERT_NAME AS NVARCHAR(4000) = (SELECT NAME FROM MSDB.DBO.SYSALERTS WHERE NAME = 'Alert Sched Close Register')
IF @ALERT_NAME IS NOT NULL
BEGIN
	EXEC msdb.dbo.sp_delete_alert @name=@ALERT_NAME
END
GO
DECLARE @JOB_ID AS NVARCHAR(4000) = (SELECT JOB_ID FROM MSDB.DBO.SYSJOBS WHERE NAME = 'Sched_Close_Register')
EXEC msdb.dbo.sp_add_alert @name=N'Alert Sched Close Register', 
		@message_id=0, 
		@severity=1, 
		@enabled=1, 
		@delay_between_responses=0, 
		@include_event_description_in=1, 
		@notification_message=N'vitodomenico.martucci@kireygroup.com', 
		@category_name=N'[Uncategorized]', 
		@job_id=@JOB_ID
GO



/* CREATE SQL SERVER AGENT JOB & ALERT FOR DBO.SP_SCHED_DELETE_RECORD_REGISTER */
USE [msdb]
GO
DECLARE @JOB_ID AS NVARCHAR(4000) = (SELECT JOB_ID FROM MSDB.DBO.SYSJOBS WHERE NAME = 'Sched_Delete_Record_Register')
IF @JOB_ID IS NOT NULL
BEGIN
	EXEC msdb.dbo.sp_delete_job @job_id=@JOB_ID, @delete_unused_schedule=1
END
GO
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
	EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
END
;
DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'Sched_Delete_Record_Register', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'TSK_KG', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'EXEC SP', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=
N'USE [KG_GUEST]
GO
DECLARE @RC int
DECLARE @LogRuolo varchar(20)
DECLARE @LogUser varchar(30)
DECLARE @LogSession varchar(40)
DECLARE @MessaggioExit varchar(2000)

EXECUTE @RC = [dbo].[SP_SCHED_DELETE_RECORD_REGISTER] 
   @LogRuolo
  ,@LogUser
  ,@LogSession
  ,@MessaggioExit OUTPUT
GO
', 
		@database_name=N'KG_GUEST', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'Scheduling', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20241007, 
		@active_end_date=99991231, 
		@active_start_time=80000, 
		@active_end_time=235959, 
		@schedule_uid=N'98a78edb-4eda-4399-b4fa-aba81b88579a'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO

USE [msdb]
GO
DECLARE @ALERT_NAME AS NVARCHAR(4000) = (SELECT NAME FROM MSDB.DBO.SYSALERTS WHERE NAME = 'Alert Sched Delete Record Register')
IF @ALERT_NAME IS NOT NULL
BEGIN
	EXEC msdb.dbo.sp_delete_alert @name=@ALERT_NAME
END
GO
DECLARE @JOB_ID AS NVARCHAR(4000) = (SELECT JOB_ID FROM MSDB.DBO.SYSJOBS WHERE NAME = 'Sched_Delete_Record_Register')
EXEC msdb.dbo.sp_add_alert @name=N'Alert Sched Delete Record Register', 
		@message_id=0, 
		@severity=15, 
		@enabled=1, 
		@delay_between_responses=0, 
		@include_event_description_in=1, 
		@database_name=N'KG_GUEST', 
		@notification_message=N'vitodomenico.martucci@kireygroup.com', 
		@category_name=N'[Uncategorized]', 
		@job_id=@JOB_ID
GO









